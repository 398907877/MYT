package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.FailOverQuesSqlNameEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.FailOverQuesVo;import com.yihu.myt.service.service.IFailOverQuesService;
public class FailOverQuesService implements IFailOverQuesService{
	/**	*获取列表记录数	*/	public Integer queryFailOverQuesCountByCondition(FailOverQuesVo vo) throws Exception{		Sql sql = DB.me().createSql(FailOverQuesSqlNameEnum.queryFailOverQuesCountByCondition);		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		Integer count = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}
	/**	*获取列表	*/	public List<FailOverQuesVo> queryFailOverQuesListByCondition(FailOverQuesVo vo) throws Exception{		Sql sql = DB.me().createSql(FailOverQuesSqlNameEnum.queryFailOverQuesListByCondition);		StringBuilder condition = new StringBuilder();		condition.append(" and FailOverStatus =  1 ");		condition.append(" and (FailOverType = 1 or  FailOverType = 0)");		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<FailOverQuesVo> list = DB.me().queryForBeanList(MyDatabaseEnum.YiHuNet2008, sql,FailOverQuesVo.class);		return list;	}
	/**	*添加	*/	public int insertFailOverQues(FailOverQuesVo vo) throws Exception{		try {			Sql sql = DB.me().createInsertSql(vo, MyTableNameEnum.ZiXun_FailOverQues,					"dbo");			int r = DB.me().insert(					MyDatabaseEnum.YiHuNet2008,sql					);			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}
	/**	*修改	*/	public void updateFailOverQuesByCondition(FailOverQuesVo vo,JdbcConnection conn) throws Exception{		Sql sql = DB.me().createSql(FailOverQuesSqlNameEnum.updateFailOverQuesByCondition);		if (vo == null  || StringUtil.isEmpty(vo.getFailOver())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {		throw new Exception("未有更新SQL被执行！");		} else {		condition.deleteCharAt(condition.length() - 1);		sql.addVar("@condition", condition.toString());		sql.addParamValue(vo.getFailOver());		}		DB.me().update(conn, sql);		}	public int updateFailOverQuesVo(FailOverQuesVo vo) throws Exception{	try {		StringBuilder condition = new StringBuilder();		if(vo.getFailOver()>0){			condition.append("  FailOver = "+ vo.getFailOver());			vo.setFailOver(null);			int r = DB.me().update(					MyDatabaseEnum.YiHuNet2008,					DB.me().createUpdateSql(vo, MyTableNameEnum.ZiXun_FailOverQues,condition.toString()));			return r;		}else{			return -1;		}			} catch (SQLException e) {		// TODO Auto-generated catch block		e.printStackTrace();		return -1;	}	}
}