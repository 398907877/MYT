package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import com.common.json.JSONObject;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.coreframework.vo.ServiceResult;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.CreditsRecordSqlNameEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.CreditsRecordVo;import com.yihu.myt.service.service.ICreditsRecordService;
public class CreditsRecordService implements ICreditsRecordService{
	/**	*获取列表记录数	*/	public Integer queryCreditsRecordCountByCondition(CreditsRecordVo vo) throws Exception{		Sql sql = DB.me().createSql(CreditsRecordSqlNameEnum.queryCreditsRecordCountByCondition);		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		Integer count = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}
	/**	*获取列表	*/	public List<CreditsRecordVo> queryCreditsRecordListByCondition(CreditsRecordVo vo) throws Exception{		Sql sql = DB.me().createSql(CreditsRecordSqlNameEnum.queryCreditsRecordListByCondition);		StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID()>0){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<CreditsRecordVo> list = DB.me().queryForBeanList(MyDatabaseEnum.YiHuNet2008, sql,CreditsRecordVo.class);		return list;	}	/**	*获取列表	*/	public List<CreditsRecordVo> queryCreditsRecordList(CreditsRecordVo vo,int start,int pageSize) throws Exception{		Sql sql = DB.me().createSql(CreditsRecordSqlNameEnum.queryCreditsRecordListByCondition);		StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID()>0){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<CreditsRecordVo> list = DB.me().queryForBeanList(MyDatabaseEnum.YiHuNet2008, sql,CreditsRecordVo.class,start, pageSize);				return list;	}		public int  queryCreditsRecordListCont(CreditsRecordVo vo) throws Exception{		Sql sql = DB.me().createSql(CreditsRecordSqlNameEnum.queryCreditsRecordListByCondition);		StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID()>0){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<CreditsRecordVo> list = DB.me().queryForBeanList(MyDatabaseEnum.YiHuNet2008, sql,CreditsRecordVo.class);		return list.size();	}	
	/**	*添加	*/	public int insertCreditsRecord(CreditsRecordVo vo) throws Exception{		try {			int r = DB.me().insert(					MyDatabaseEnum.YiHuNet2008,					DB.me().createInsertSql(vo, MyTableNameEnum.ZiXun_CreditsRecord,							"dbo"));			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}							}
	/**	*修改	*/	public void updateCreditsRecordByCondition(CreditsRecordVo vo,JdbcConnection conn) throws Exception{Sql sql = DB.me().createSql(CreditsRecordSqlNameEnum.updateCreditsRecordByCondition);		if (vo == null  || StringUtil.isEmpty(vo.getCR_ID())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {		throw new Exception("未有更新SQL被执行！");		} else {		condition.deleteCharAt(condition.length() - 1);		sql.addVar("@condition", condition.toString());		sql.addParamValue(vo.getCR_ID());		}		DB.me().update(conn, sql);		}
}