package com.yihu.myt.dao;import java.util.List;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.BookEnrolSqlNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.BookEnrolVo;
public class BookEnrolDAO {
	/**	*添加	*/	public void insertBookEnrol(BookEnrolVo vo,JdbcConnection conn) throws Exception{		Sql sql = DB.me().createSql(BookEnrolSqlNameEnum.insertBookEnrol);		sql.addParamValue(vo.getBOOKENROLID());		sql.addParamValue(vo.getDOCTORID());		sql.addParamValue(vo.getSEVENDOCTORID());		sql.addParamValue(vo.getTENDOCTORID());		sql.addParamValue(vo.getDOCTORNAME());		sql.addParamValue(vo.getOPERCONFID());		sql.addParamValue(vo.getHOSPOFFICEID());		sql.addParamValue(vo.getHOSPOFFICENAME());		sql.addParamValue(vo.getCARDID());		sql.addParamValue(vo.getCUSTNAME());		sql.addParamValue(vo.getCUSTPHONE());		sql.addParamValue(vo.getCONSTYPE());		sql.addParamValue(vo.getREVERTPHONE());		sql.addParamValue(vo.getRSPERIOD());		sql.addParamValue(vo.getREVERTDATE());		sql.addParamValue(vo.getREVERTRESULT());		sql.addParamValue(vo.getORGID());		sql.addParamValue(vo.getCITYID());		sql.addParamValue(vo.getOPERATORID());		sql.addParamValue(vo.getOPERATORNAME());		sql.addParamValue(vo.getOPERTIME());		sql.addParamValue(vo.getSTATE());		sql.addParamValue(vo.getREMARK());		sql.addParamValue(vo.getDATEWEEK());		sql.addParamValue(vo.getSTARTTIME());		sql.addParamValue(vo.getENDTIME());		sql.addParamValue(vo.getLdh());		sql.addParamValue(vo.getCardtypesn());		sql.addParamValue(vo.getCardorgid());		sql.addParamValue(vo.getProvinceId());		sql.addParamValue(vo.getPackageId());		DB.me().insert(conn,sql);		}		public int insertBookEnrolRt(BookEnrolVo vo,JdbcConnection conn) throws Exception{		Sql sql = DB.me().createSql(BookEnrolSqlNameEnum.insertBookEnrol);		sql.addParamValue(vo.getDOCTORID());		sql.addParamValue(vo.getSEVENDOCTORID());		sql.addParamValue(vo.getTENDOCTORID());		sql.addParamValue(vo.getDOCTORNAME());		sql.addParamValue(vo.getOPERCONFID());		sql.addParamValue(vo.getHOSPOFFICEID());		sql.addParamValue(vo.getHOSPOFFICENAME());		sql.addParamValue(vo.getCARDID());		sql.addParamValue(vo.getCUSTNAME());		sql.addParamValue(vo.getCUSTPHONE());		sql.addParamValue(vo.getCONSTYPE());		sql.addParamValue(vo.getREVERTPHONE());		sql.addParamValue(vo.getRSPERIOD());		sql.addParamValue(vo.getREVERTDATE());		sql.addParamValue(vo.getREVERTRESULT());		sql.addParamValue(vo.getORGID());		sql.addParamValue(vo.getCITYID());		sql.addParamValue(vo.getOPERATORID());		sql.addParamValue(vo.getOPERATORNAME());		sql.addParamValue(vo.getOPERTIME());		sql.addParamValue(vo.getSTATE());		sql.addParamValue(vo.getREMARK());		sql.addParamValue(vo.getDATEWEEK());		sql.addParamValue(vo.getSTARTTIME());		sql.addParamValue(vo.getENDTIME());		sql.addParamValue(vo.getLdh());		sql.addParamValue(vo.getCardtypesn());		sql.addParamValue(vo.getCardorgid());		sql.addParamValue(vo.getProvinceId());		sql.addParamValue(vo.getPackageId());		sql.addParamValue(vo.getComeFrom());		int rt = DB.me().insert(conn,sql);		return rt;		}
	/**	*修改	*/	public void updateBookEnrolByCondition(BookEnrolVo vo,JdbcConnection conn) throws Exception{Sql sql = DB.me().createSql(BookEnrolSqlNameEnum.updateBookEnrolByCondition);		if (vo == null  || StringUtil.isEmpty(vo.getBOOKENROLID())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (StringUtil.isNotEmpty(vo.getSTATE())) {			condition.append(" STATE=?").append(",");			sql.addParamValue(vo.getSTATE());		}		if (StringUtil.isNotEmpty(vo.getREVERTRESULT())) {			condition.append(" REVERTRESULT=?").append(",");			sql.addParamValue(vo.getREVERTRESULT());		}		if (StringUtil.isNotEmpty(vo.getCUSTPHONE())) {			condition.append(" CUSTPHONE=?").append(",");			sql.addParamValue(vo.getCUSTPHONE());		}		if (StringUtil.isNotEmpty(vo.getREVERTPHONE())) {			condition.append(" REVERTPHONE=?").append(",");			sql.addParamValue(vo.getREVERTPHONE());		}		if (condition.length() == 0) {		throw new Exception("未有更新SQL被执行！");		} else {		condition.deleteCharAt(condition.length() - 1);		sql.addVar("@condition", condition.toString());		sql.addParamValue(vo.getBOOKENROLID());		}		DB.me().update(conn, sql);		}	public int upBookEnrolByCondition(BookEnrolVo vo, JdbcConnection conn)			throws Exception {		Sql sql = DB.me().createSql(				BookEnrolSqlNameEnum.updateBookEnrolByCondition);		if (vo == null || StringUtil.isEmpty(vo.getBOOKENROLID())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (StringUtil.isNotEmpty(vo.getSTATE())) {			condition.append(" STATE=?").append(",");			sql.addParamValue(vo.getSTATE());		}		if (StringUtil.isNotEmpty(vo.getREVERTRESULT())) {			condition.append(" REVERTRESULT=?").append(",");			sql.addParamValue(vo.getREVERTRESULT());		}		if (StringUtil.isNotEmpty(vo.getCUSTPHONE())) {			condition.append(" CUSTPHONE=?").append(",");			sql.addParamValue(vo.getCUSTPHONE());		}		if (StringUtil.isNotEmpty(vo.getREVERTPHONE())) {			condition.append(" REVERTPHONE=?").append(",");			sql.addParamValue(vo.getREVERTPHONE());		}		if (condition.length() == 0) {			throw new Exception("未有更新SQL被执行！");		} else {			condition.deleteCharAt(condition.length() - 1);			sql.addVar("@condition", condition.toString());			sql.addParamValue(vo.getBOOKENROLID());		}		int rt = DB.me().update(conn, sql);		return rt;	}
}