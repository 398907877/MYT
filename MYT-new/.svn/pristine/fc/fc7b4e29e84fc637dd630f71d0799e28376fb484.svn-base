package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import java.util.Map;import java.util.Set;import org.apache.commons.lang3.StringUtils;import net.sf.json.JSONArray;import com.common.json.JSONObject;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.DoctorDefaultAuthSqlNameEnum;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.enums.QuesMainSqlNameEnum;import com.yihu.myt.util.DBCache;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.CloseQueVo;import com.yihu.myt.vo.QuesMainVo;import com.yihu.myt.mgr.ApiUtil;import com.yihu.myt.myException.SmallDepartmentListNullException;import com.yihu.myt.service.service.IQuesMainService;public class QuesMainService implements IQuesMainService {	/**	 * 获取列表记录数	 */	public Integer queryQuesMainCountByCondition(QuesMainVo vo)			throws Exception {		Sql sql = DB.me().createSql(				QuesMainSqlNameEnum.queryQuesMainCountByCondition);		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}	/**	 * 获取列表记录数	 */	public Integer querySameQueCont(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.querySameQueCont);		StringBuilder condition = new StringBuilder();		if (StringUtil.isNotEmpty(vo.getQUESMAIN_Content())) {			condition.append(" and QUESMAIN_Content= ? ");			sql.addParamValue(vo.getQUESMAIN_Content());		}		if (vo.getASK_UserID() > 0) {			condition.append(" and ASK_UserID =" + vo.getASK_UserID());		}		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}	/**	 * 获取已解决的所有问题总数	 */	public Integer querCountOverQus(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryOverQuesCont);		StringBuilder condition = new StringBuilder();		if (vo.getQD_AskDeptID() != null) {			condition.append(" and  QD_AskDeptID =" + vo.getQD_AskDeptID());		}		if (vo.getASK_DoctorID() != null) {			condition.append(" and ASK_DoctorID =" + vo.getASK_DoctorID());		}		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}		/**	 * 获取已解决的所有问题总数	 */	public Integer querCountHaveQus(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryHvaeQuesCont);		StringBuilder condition = new StringBuilder();		condition		.append("   AND QD_IsReplay = 0 AND QD_IsUserReplay = 1 AND QD_Status = 0  AND (QD_DocReplayCount > 0"				+ " OR (QD_DocReplayCount=0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0))");		condition.append(" AND  ASK_DoctorID = "				+ vo.getASK_DoctorID());		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}	/**	 * 获取需要发送短信的医生列表	 */	public com.common.json.JSONObject queryQuesCountForSendSMS(QuesMainVo vo)			throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryQuesCountForSendSMS);		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		com.common.json.JSONObject rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}	/**	 * 获取抢答问题总数	 */	public Integer querCountAnswerQus(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.querCountAnswerQus);		StringBuilder condition = new StringBuilder();		if (vo.getQUESMAIN_ID() != null) {			condition.append(" and QUESMAIN_ID =" + vo.getQUESMAIN_ID());		}		if (vo.getASK_DoctorID() != null) {			condition.append(" and ASK_DoctorID =" + vo.getASK_DoctorID());		}		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}	/**	 * 获取是否该问题为医生抢答	 */	public Integer querCountDcAnswerQus(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.querCountDCAnswerQus);		StringBuilder condition = new StringBuilder();		if (vo.getQUESMAIN_ID() != null) {			condition.append(" and QUESMAIN_ID =" + vo.getQUESMAIN_ID());		}		if (vo.getASK_DoctorID() != null) {			condition.append(" and ASK_DoctorID =" + vo.getASK_DoctorID());		}		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}	/**	 * 获取组团问题总数	 */	public com.common.json.JSONObject querTeamQus(QuesMainVo vo, String time)			throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryTeamCont);		StringBuilder condition = new StringBuilder();		if (vo.getQD_QuesType() != null) {			condition.append(" and  QD_QuesType =" + vo.getQD_QuesType());		}		if (vo.getQD_DocFreeID() != null) {			condition.append(" and  QD_DocFreeID =" + vo.getQD_DocFreeID());		}		sql.addParamValue(time);		sql.addVar("@condition", condition.toString());		com.common.json.JSONObject rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}	/**	 * 获取列表	 */	public List<QuesMainVo> queryQuesMainListByCondition(QuesMainVo vo)			throws Exception {		Sql sql = DB.me().createSql(				QuesMainSqlNameEnum.queryQuesMainListByCondition);		StringBuilder condition = new StringBuilder();		if (vo.getQUESMAIN_ID() != null) {			condition.append(" and QUESMAIN_ID =" + vo.getQUESMAIN_ID());		}		if (StringUtil.isNotEmpty(vo.getQuesIDS())) {			condition.append(" and QUESMAIN_ID in ( ? )");			sql.addParamValue(vo.getQuesIDS());		}		if (vo.getASK_UserID() != null) {			condition.append(" and ASK_UserID =" + vo.getASK_UserID());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		System.out.println(sql.toString());		List<QuesMainVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, QuesMainVo.class);		return list;	}	/**	 * 获取列表	 */	public List<QuesMainVo> queryQuestionLibraryListByCondition(QuesMainVo vo)			throws Exception {		Sql sql = DB.me().createSql(				QuesMainSqlNameEnum.queryQuestionLibraryListByCondition);		StringBuilder condition = new StringBuilder();		if (vo.getQUESMAIN_ID() != 0) {			condition.append(" and QUESMAIN_ID =" + vo.getQUESMAIN_ID());		}		if (StringUtil.isNotEmpty(vo.getQuesIDS())) {			condition.append(" and QUESMAIN_ID in ( ? )");			sql.addParamValue(vo.getQuesIDS());		}		if (vo.getASK_UserID() != null) {			condition.append(" and ASK_UserID =" + vo.getASK_UserID());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");				System.out.println(sql.toString());		List<QuesMainVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, QuesMainVo.class);		return list;	}	/**	 * 获取医生问题列表包括患者信息	 */	public String queryQuesAndPatient(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryQuesAndPatient);		StringBuilder condition = new StringBuilder();		if (StringUtil.isNotEmpty(vo.getQuesIDS())) {			condition.append(" and QUESMAIN_ID in ( @p )");			sql.addVar("@p", vo.getQuesIDS());		}		sql.addVar("@condition", condition.toString());		// System.out.println(sql.toString());		com.common.json.JSONObject rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();	}	/**	 * APP获取医生问题列表	 */	public String queryDesignationQuesListForApp(QuesMainVo vo,			Integer quesType, Integer pageSize, Integer pageIndex)			throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryDoctorList);		StringBuilder condition = new StringBuilder();		StringBuilder orderBy = new StringBuilder();		if (quesType == 1) {			condition.append(" AND q.ASK_DoctorID = " + vo.getASK_DoctorID());			condition.append(" AND QUESMAIN_Status = 1 ");			condition					.append("  AND (QD_CheckStatus = 1 or  QD_CheckStatus = 3)");			condition.append("  AND QD_Status = 0 ");			condition					.append("  AND (QD_OrdersStatus =2 OR QD_OrdersStatus = 0)");			condition.append(" AND ( QD_SourceType = 0");			condition					.append(" OR (QD_SourceType = 1 AND DATEDIFF(MINUTE, QD_RecordExpiredTime, GETDATE()) <= 0  AND QD_DocReplayCount = 0)");			condition			.append(" OR (QD_SourceType = 1 AND QD_DocReplayCount > 0 ) )");			orderBy.append(" ORDER BY QUESMAIN_CreateTime desc ");		} else if (quesType == 2) {			condition.append(" AND q.ASK_DoctorID = " + vo.getASK_DoctorID());			condition.append("AND ( QD_Status = 1   ");			condition.append("  OR QD_Status = 2    )");			condition.append(" AND (QD_SourceType = 0 OR QD_SourceType =1)   ");			orderBy.append(" ORDER BY QUESMAIN_CreateTime desc ");		} else if (quesType == 3) {			condition.append(" AND  CHARINDEX(" + "'," + vo.getQD_DeptTwoIDS()					+ ",'" + ",QD_DeptTwoIDS)> 0 ");			condition.append(" AND  QUESMAIN_Status = 1  ");			condition					.append(" AND (QD_CheckStatus = 1 or QD_CheckStatus = 3)  ");			condition.append(" AND QD_SourceType = 1  ");			condition.append("  AND QD_IsReplay = 0  ");			condition.append("  AND QD_IsUserReplay = 1  ");			condition.append("  AND QD_Status = 0  ");			condition.append("  AND QD_DocReplayCount = 0  ");			condition.append("  AND ( ASK_DoctorID = 0  ");			condition.append("  OR ( ASK_DoctorID > 0  ");			condition					.append("  AND DATEDIFF(MINUTE, QD_RecordExpiredTime, GETDATE()) > 0      ) ) ");			condition.append("   AND QD_SourceType =1   ");			orderBy.append(" ORDER BY QUESMAIN_CreateTime desc ");		} else if (quesType == 4 && vo.getQD_AskDeptID() > 0) {// 科室咨询未领取			condition					.append(" AND QUESMAIN_Status = 1 AND (QD_CheckStatus=1 or QD_CheckStatus=3) AND QD_SourceType = 2 AND (QD_OrdersStatus = 0 OR"							+ " QD_OrdersStatus =2)");			condition.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());			condition					.append("  AND QD_IsReplay = 0 AND QD_IsUserReplay = 1 AND QD_Status =0 AND QD_DocReplayCount =0 "							+ " AND ( q.ASK_DoctorID = 0 OR (q.ASK_DoctorID>0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)<0)) ");			orderBy.append("ORDER BY QUESMAIN_CreateTime DESC");		} else if (quesType == 5 && vo.getQD_AskDeptID() > 0) {// 我的科室咨询列表			condition					.append(" AND QUESMAIN_Status = 1 AND (QD_CheckStatus=1 or QD_CheckStatus=3) AND QD_SourceType = 2 AND (QD_OrdersStatus = 0 OR"							+ " QD_OrdersStatus =2)");			condition.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());			condition.append(" AND ASK_DoctorID = " + vo.getASK_DoctorID());			condition					.append("  AND( (  QD_IsReplay = 0 AND  QD_IsUserReplay=1 AND QD_Status = 0 AND (QD_DocReplayCount > 0"							+ " OR ( QD_DocReplayCount =0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0)) ) OR   ");			condition					.append(" ( QD_IsReplay = 1 AND QD_IsUserReplay =0 AND QD_Status =0  AND QD_DocReplayCount > 0) ) ");			orderBy.append("ORDER BY QUESMAIN_CreateTime DESC");		} else if (quesType == 6 && vo.getQD_AskDeptID() > 0) {// 历史			condition					.append(" AND QUESMAIN_Status = 1 AND (QD_CheckStatus=1 or QD_CheckStatus=3)  AND QD_SourceType = 2 AND (QD_OrdersStatus = 0 OR "							+ " QD_OrdersStatus =2)");			condition.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());			condition.append(" AND ASK_DoctorID = " + vo.getASK_DoctorID());			condition					.append(" AND (QD_Status=1  or   QD_Status=2 ) AND  QD_DocReplayCount >0 ");			orderBy.append(" order by QUESMAIN_CreateTime DESC ");		} else if (quesType == 7) {// 所有历史问题			condition					.append(" AND (  q.ASK_DoctorID = " + vo.getASK_DoctorID());			condition.append(" AND ( QD_Status = 1   ");			condition.append("  OR QD_Status = 2    )");			condition					.append(" AND (QD_SourceType = 0 OR QD_SourceType =1) )  ");			condition.append(" or ");			condition					.append(" ( QUESMAIN_Status = 1 AND (QD_CheckStatus=1 or  QD_CheckStatus=3 ) AND QD_SourceType = 2 AND (QD_OrdersStatus = 0 OR "							+ " QD_OrdersStatus =2)");			condition.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());			condition.append(" AND ASK_DoctorID = " + vo.getASK_DoctorID());			condition					.append(" AND (QD_Status=1  or   QD_Status=2 ) AND  QD_DocReplayCount >0 ) ");			orderBy.append(" ORDER BY QUESMAIN_CreateTime desc ");		}		sql.addVar("@orderBy", orderBy.toString());		sql.addVar("@c", "");		sql.addVar("@condition", condition.toString());		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@page", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@page", "");		}		//System.out.println(sql.toString());		com.common.json.JSONObject rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();	}	public String queryQuestionLibraryListForApp(QuesMainVo vo,			Integer quesType, Integer pageSize, Integer pageIndex)			throws Exception {		Sql sql = DB.me().createSql(				QuesMainSqlNameEnum.queryQuestionLibraryList);		StringBuilder condition = new StringBuilder();		StringBuilder orderBy = new StringBuilder();		if (quesType == 3) {			condition.append(" AND  CHARINDEX(" + "'," + vo.getQD_DeptTwoIDS()					+ ",'" + ",QD_DeptTwoIDS)> 0 ");			orderBy.append(" ORDER BY QUESMAIN_CreateTime desc ");		}		sql.addVar("@orderBy", orderBy.toString());		sql.addVar("@c", "");		sql.addVar("@condition", condition.toString());		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@page", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@page", "");		}		// System.out.println(sql.toString());		com.common.json.JSONObject rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();	}	public Integer queryQuestionLibraryCountForApp(QuesMainVo vo,			Integer quesType) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryDoctorQuestionLibraryListCount);		StringBuilder condition = new StringBuilder();		if (quesType == 3) {			condition.append(" AND  CHARINDEX(" + "'," + vo.getQD_DeptTwoIDS()					+ ",'" + ",QD_DeptTwoIDS)> 0 ");		}		sql.addVar("@c", "");		sql.addVar("@condition", condition.toString());		 //System.out.println(sql.toString());		Integer rt = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}	/**	 * APP获取医生问题列表总数	 */	public Integer queryDesignationCountQuesListForApp(QuesMainVo vo,			Integer quesType) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryDoctorListCount);		StringBuilder condition = new StringBuilder();		if (quesType == 1) {			if(vo.getASK_UserID()!=null){				condition.append(" AND q.ASK_UserID = " + vo.getASK_UserID());			}			condition.append(" AND q.ASK_DoctorID = " + vo.getASK_DoctorID());			condition.append(" AND QUESMAIN_Status = 1 ");			condition.append("  AND (QD_CheckStatus = 1 or QD_CheckStatus=3)");			condition.append("  AND QD_Status = 0 ");			condition					.append("  AND (QD_OrdersStatus =2 OR QD_OrdersStatus = 0)");			condition.append(" AND ( QD_SourceType = 0");			condition					.append(" OR (QD_SourceType = 1 AND DATEDIFF(MINUTE, QD_RecordExpiredTime, GETDATE()) <= 0 AND QD_DocReplayCount = 0 )");			condition			.append(" OR (QD_SourceType = 1 AND QD_DocReplayCount > 0 ))");		} else if (quesType == 2) {			condition.append(" AND q.ASK_DoctorID = " + vo.getASK_DoctorID());			if(vo.getASK_UserID()!=null){				condition.append(" AND q.ASK_UserID = " + vo.getASK_UserID());			}			condition.append("AND ( QD_Status = 1   ");			condition.append("  OR QD_Status = 2    )");			condition.append(" AND (QD_SourceType = 0 OR QD_SourceType =1)   ");		} else if (quesType == 3) {			if(vo.getASK_UserID()!=null){				condition.append(" AND q.ASK_UserID = " + vo.getASK_UserID());			}			condition.append(" AND  CHARINDEX(" + "'," + vo.getQD_DeptTwoIDS()					+ ",'" + ",QD_DeptTwoIDS)> 0 ");			condition.append(" AND  QUESMAIN_Status = 1  ");			condition.append(" AND (QD_CheckStatus = 1 or QD_CheckStatus=3)  ");			condition.append(" AND QD_SourceType = 1  ");			condition.append("  AND QD_IsReplay = 0  ");			condition.append("  AND QD_IsUserReplay = 1  ");			condition.append("  AND QD_Status = 0  ");			condition.append("  AND QD_DocReplayCount = 0  ");			condition.append("  AND ( ASK_DoctorID = 0  ");			condition.append("  OR ( ASK_DoctorID > 0  ");			condition					.append("  AND DATEDIFF(MINUTE, QD_RecordExpiredTime, GETDATE()) > 0      ) ) ");			condition.append("   AND QD_SourceType =1   ");		} else if (quesType == 4 && vo.getQD_AskDeptID() > 0) {// 科室咨询未领取			condition					.append(" AND QUESMAIN_Status = 1 AND (QD_CheckStatus=1 or QD_CheckStatus=3) AND QD_SourceType = 2 AND (QD_OrdersStatus = 0 OR"							+ " QD_OrdersStatus =2)");			condition.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());			condition					.append("  AND QD_IsReplay = 0 AND QD_IsUserReplay = 1 AND QD_Status =0 AND QD_DocReplayCount =0 "							+ " AND ( q.ASK_DoctorID = 0 OR (q.ASK_DoctorID>0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)<0)) ");		} else if (quesType == 5 && vo.getQD_AskDeptID() > 0) {// 我的科室咨询列表			/*condition					.append(" AND QUESMAIN_Status = 1 AND (QD_CheckStatus=1 or QD_CheckStatus=3) AND QD_SourceType = 2 AND (QD_OrdersStatus = 0 OR"							+ " QD_OrdersStatus =2)");			condition.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());			condition.append(" AND ASK_DoctorID = " + vo.getASK_DoctorID());			condition					.append("  AND( (  QD_IsReplay = 0 AND  QD_IsUserReplay=1 AND QD_Status = 0 AND (QD_DocReplayCount > 0"							+ " OR ( QD_DocReplayCount =0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0)) ) OR   ");			condition					.append(" ( QD_IsReplay = 1 AND QD_IsUserReplay =0 AND QD_Status =0  AND QD_DocReplayCount > 0) ) ");*/						condition					.append(" AND QUESMAIN_Status = 1 AND (QD_CheckStatus=1 or QD_CheckStatus=3) AND (QD_SourceType = 2  or QD_SourceType = 3) AND (QD_OrdersStatus = 0 OR"							+ " QD_OrdersStatus =2)");			condition.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());			condition					.append("  AND QD_IsReplay = 0 AND  QD_IsUserReplay=1 AND QD_Status = 0 AND (QD_DocReplayCount > 0"							+ " OR ( QD_DocReplayCount =0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0))  ");			condition.append(" AND  q.ASK_DoctorID = " + vo.getASK_DoctorID());			if(vo.getASK_UserID()!=null){				condition.append(" AND q.ASK_UserID = " + vo.getASK_UserID());			}					} else if (quesType == 6 && vo.getQD_AskDeptID() > 0) {// 历史			condition					.append(" AND QUESMAIN_Status = 1 AND (QD_CheckStatus=1 or QD_CheckStatus=3) AND QD_SourceType = 2 AND (QD_OrdersStatus = 0 OR "							+ " QD_OrdersStatus =2)");			condition.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());			condition.append(" AND ASK_DoctorID = " + vo.getASK_DoctorID());			if(vo.getASK_UserID()!=null){				condition.append(" AND q.ASK_UserID = " + vo.getASK_UserID());			}			condition					.append(" AND (QD_Status=1  or   QD_Status=2 ) AND  QD_DocReplayCount >0 ");		} else if (quesType == 7) {// 所有历史问题			condition					.append(" AND (  q.ASK_DoctorID = " + vo.getASK_DoctorID());			condition.append(" AND ( QD_Status = 1   ");			condition.append("  OR QD_Status = 2    )");			condition					.append(" AND (QD_SourceType = 0 OR QD_SourceType =1) )  ");			condition.append(" or ");			condition					.append(" ( QUESMAIN_Status = 1 AND (QD_CheckStatus=1 or QD_CheckStatus=3) AND QD_SourceType = 2 AND (QD_OrdersStatus = 0 OR "							+ " QD_OrdersStatus =2)");			condition.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());			condition.append(" AND ASK_DoctorID = " + vo.getASK_DoctorID());			if(vo.getASK_UserID()!=null){				condition.append(" AND q.ASK_UserID = " + vo.getASK_UserID());			}			condition					.append(" AND (QD_Status=1  or   QD_Status=2 ) AND  QD_DocReplayCount >0 ) ");		}				sql.addVar("@c", "");		sql.addVar("@condition", condition.toString());		//System.out.println(sql.toString());		Integer rt = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}	/**	 * APP获取医生问题列表总数	 */	public Integer queryDesignationCountQuesListForAppV2(QuesMainVo vo,			Integer quesType) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryDoctorListCount);		StringBuilder condition = new StringBuilder();		if (quesType == 1) {			condition.append(" AND q.ASK_DoctorID = " + vo.getASK_DoctorID());			condition.append(" AND QUESMAIN_Status = 1 ");			condition.append("  AND (QD_CheckStatus = 1 or QD_CheckStatus=3)");			condition.append("  AND QD_Status = 0 ");			condition					.append("  AND (QD_OrdersStatus =2 OR QD_OrdersStatus = 0)");			condition.append(" AND ( (QD_SourceType = 0 and  QD_DocReplayCount = 0 ) ");			condition					.append(" OR (QD_SourceType = 1 AND DATEDIFF(MINUTE, QD_RecordExpiredTime, GETDATE()) <= 0 AND QD_DocReplayCount = 0 )");			condition			.append(")");		} 		sql.addVar("@c", "");		sql.addVar("@condition", condition.toString());		//System.out.println(sql.toString());		Integer rt = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}	/**	 * WEB获取医生问题列表总数	 */	public Integer queryDesignationQuesList(QuesMainVo vo, Integer quesType,			Integer queStatus, Integer provinceID) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryDoctorListCount);		StringBuilder condition = new StringBuilder();		StringBuilder condition2 = new StringBuilder();		if (quesType == 1) {			condition					.append(" AND QUESMAIN_Status = 1 AND (QD_CheckStatus =1 or QD_CheckStatus=3) AND QD_SourceType = 0"							+ "  AND (QD_OrdersStatus = 0 OR QD_OrdersStatus=2) ");			if (queStatus == 0) {// 未回复				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());				condition						.append(" AND QD_IsReplay = 0 AND QD_IsUserReplay=1 AND QD_Status = 0     AND ( QD_DocReplayCount > 0 "								+ " OR ( DATEDIFF(MINUTE,GETDATE(),QUESMAIN_ExpiredTime) > 0 AND QD_DocReplayCount =0)  ) ");			} else if (queStatus == 1) {// 已回复				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());				condition						.append(" AND QD_IsReplay = 1 AND QD_IsUserReplay=0 AND QD_DocReplayCount > 0 AND QD_Status=0");			} else if (queStatus == 2) {// 已关闭				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());				condition						.append(" AND QD_DocReplayCount > 0 AND (QD_Status=1  or   QD_Status=2 )");			} else if (queStatus == 3) {// 已超时				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());				condition						.append("  AND    DATEDIFF(MINUTE,QUESMAIN_ExpiredTime,GETDATE()) > 0 "								+ "AND QD_DocReplayCount =0   AND QD_IsReplay = 0 AND QD_IsUserReplay=1  AND QD_Status=0 ");			}		} 		else if (quesType == 2) {// 科室咨询			condition					.append(" AND QUESMAIN_Status = 1 AND (QD_CheckStatus=1 or QD_CheckStatus=3) AND (QD_SourceType = 2  or QD_SourceType = 3) AND (QD_OrdersStatus = 0 OR"							+ " QD_OrdersStatus =2)");			condition.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());			if (queStatus == -1) {// 未领取				condition						.append("  AND QD_IsReplay = 0 AND QD_IsUserReplay = 1 AND QD_Status =0 AND QD_DocReplayCount =0 "								+ " AND ( q.ASK_DoctorID = 0 OR (q.ASK_DoctorID>0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)<0)) ");				if(StringUtil.isNotEmpty(vo.getQD_DocFreeIDs())){					condition					.append(" AND (QD_SourceType = 2  or ( QD_SourceType = 3 and (   QD_QuesType = 2 and QD_DocFreeID in ( " + vo.getQD_DocFreeIDs() +") )) )");				}else{					condition					.append(" AND (QD_SourceType = 2   ) ");				}			} else if (queStatus == 0) {// 未回复				condition						.append("  AND QD_IsReplay = 0 AND  QD_IsUserReplay=1 AND QD_Status = 0 AND (QD_DocReplayCount > 0"								+ " OR ( QD_DocReplayCount =0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0))  ");				condition.append(" AND  q.ASK_DoctorID = "						+ vo.getASK_DoctorID() );				if(StringUtil.isNotEmpty(vo.getQD_DocFreeIDs())){					condition					.append(" AND (QD_SourceType = 2  or ( QD_SourceType = 3 and (   QD_QuesType = 2 and QD_DocFreeID in ( " + vo.getQD_DocFreeIDs() +") )) )");				}else{					condition					.append(" AND (QD_SourceType = 2   ) ");				}			} else if (queStatus == 1) {// 已回复				condition.append(" AND  ASK_DoctorID = "						+ vo.getASK_DoctorID()  + " ");				condition						.append(" AND QD_IsReplay = 1 AND QD_IsUserReplay =0 AND QD_Status =0  AND QD_DocReplayCount > 0 ");				if(StringUtil.isNotEmpty(vo.getQD_DocFreeIDs())){					condition					.append(" AND (QD_SourceType = 2  or ( QD_SourceType = 3 and (   QD_QuesType = 2 and QD_DocFreeID in ( " + vo.getQD_DocFreeIDs() +") )) )");				}else{					condition					.append(" AND (QD_SourceType = 2   ) ");				}			} else if (queStatus == 2) {// 已关闭				if(StringUtil.isNotEmpty(vo.getQD_DocFreeIDs())){					condition					.append(" AND ( (QD_SourceType = 2 and ASK_DoctorID = " + vo.getASK_DoctorID() +"  ) or ( QD_SourceType = 3 and (   QD_QuesType = 2 and QD_DocFreeID in ( " + vo.getQD_DocFreeIDs() +") ) )");				}else{					condition					.append(" AND (QD_SourceType = 2   ) ");					condition.append("   ASK_DoctorID = "							+ vo.getASK_DoctorID() );				}				condition						.append(" ) AND (QD_Status=1  or   QD_Status=2 ) AND  QD_DocReplayCount >0 ");			}		}  else if (quesType == 3) {// 公共问题			condition					.append("AND QUESMAIN_Status = 1 AND (QD_CheckStatus = 1 or QD_CheckStatus=3) AND QD_SourceType = 1"							+ " AND  CHARINDEX("							+ "',"							+ vo.getQD_DeptTwoIDS()							+ ",'" + ",QD_DeptTwoIDS)> 0 ");			if (queStatus == -1) {// 未领取				condition						.append(" AND QD_IsReplay = 0 AND QD_IsUserReplay = 1 AND QD_Status = 0 AND QD_DocReplayCount = 0 AND"								+ " ( q.ASK_DoctorID = 0  OR  (q.ASK_DoctorID > 0 AND DATEDIFF(MINUTE,QD_RecordExpiredTime,GETDATE())>0) )");/*				condition2.append(" AND ASK_ProvinceID =  " + provinceID);				condition2.append(" OR ( ASK_ProvinceID <>  " + provinceID);*/				/*condition2						.append("    AND DATEDIFF(MINUTE, QUESMAIN_CreateTime, GETDATE()) > 180");*/				//condition2.append("  )");			} else if (queStatus == 0) {// 未回复				condition						.append("   AND QD_IsReplay = 0 AND QD_IsUserReplay = 1 AND QD_Status = 0  AND (QD_DocReplayCount > 0"								+ " OR (QD_DocReplayCount=0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0))");				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());			} else if (queStatus == 1) {// 已回复				condition						.append(" AND  ASK_DoctorID = " + vo.getASK_DoctorID());				condition						.append("  AND QD_IsReplay = 1 AND QD_IsUserReplay =0 AND QD_Status = 0 and QD_DocReplayCount > 0");			} else if (queStatus == 2) {// 已关闭				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());				condition						.append(" AND (QD_Status = 1 OR QD_Status =2 )  AND QD_DocReplayCount > 0 ");			}		}		sql.addVar("@c", condition2.toString());		sql.addVar("@condition", condition.toString());		//System.out.println(sql.toString());		Integer rt = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}	/**	 * WEB获取医生问题列表	 */	public String queryDesignationQuesList(QuesMainVo vo, Integer quesType,			Integer queStatus, Integer provinceID, Integer cityID,			Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryDoctorList);		StringBuilder condition = new StringBuilder();		StringBuilder orderBy = new StringBuilder();		StringBuilder condition2 = new StringBuilder();		if (quesType == 1) {			condition					.append(" AND QUESMAIN_Status = 1 AND (QD_CheckStatus =1 or QD_CheckStatus=3) AND QD_SourceType = 0"							+ "  AND (QD_OrdersStatus = 0 OR QD_OrdersStatus=2) ");			if (queStatus == 0) {// 未回复				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());				condition						.append(" AND QD_IsReplay = 0 AND QD_IsUserReplay=1 AND QD_Status = 0     AND (QD_DocReplayCount > 0 "								+ " OR (DATEDIFF(MINUTE,GETDATE(),QUESMAIN_ExpiredTime) > 0 AND QD_DocReplayCount =0)) ");				orderBy.append("  order by QUESMAIN_ID ASC ");			} else if (queStatus == 1) {// 已回复				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());				condition						.append(" AND QD_IsReplay = 1 AND QD_IsUserReplay=0 AND QD_DocReplayCount > 0 AND QD_Status=0");				orderBy.append("ORDER BY QUESMAIN_CreateTime DESC");			} else if (queStatus == 2) {// 已关闭				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());				condition						.append(" AND QD_DocReplayCount > 0 AND (QD_Status=1  or   QD_Status=2 )");				orderBy.append("ORDER BY QUESMAIN_ID ASC");			} else if (queStatus == 3) {// 已超时				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());				condition						.append("  AND    DATEDIFF(MINUTE,QUESMAIN_ExpiredTime,GETDATE()) > 0 "								+ "AND QD_DocReplayCount =0   AND QD_IsReplay = 0 AND QD_IsUserReplay=1  AND QD_Status=0 ");				orderBy.append("  order by QUESMAIN_ID ASC ");			}		} else if (quesType == 2) {// 科室咨询			condition					.append(" AND QUESMAIN_Status = 1 AND (QD_CheckStatus=1 or QD_CheckStatus=3) AND (QD_SourceType = 2  or QD_SourceType = 3) AND (QD_OrdersStatus = 0 OR"							+ " QD_OrdersStatus =2)");			condition.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());			if (queStatus == -1) {// 未领取				condition						.append("  AND QD_IsReplay = 0 AND QD_IsUserReplay = 1 AND QD_Status =0 AND QD_DocReplayCount =0 "								+ " AND ( q.ASK_DoctorID = 0 OR (q.ASK_DoctorID>0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)<0)) ");				if(StringUtil.isNotEmpty(vo.getQD_DocFreeIDs())){					condition					.append(" AND (QD_SourceType = 2  or ( QD_SourceType = 3 and (   QD_QuesType = 2 and QD_DocFreeID in ( " + vo.getQD_DocFreeIDs() +") )) )");				}else{					condition					.append(" AND (QD_SourceType = 2   ) ");				}				orderBy.append("ORDER BY QUESMAIN_CreateTime DESC ");			} else if (queStatus == 0) {// 未回复				condition						.append("  AND QD_IsReplay = 0 AND  QD_IsUserReplay=1 AND QD_Status = 0 AND (QD_DocReplayCount > 0"								+ " OR ( QD_DocReplayCount =0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0))  ");				condition.append(" AND  q.ASK_DoctorID = "						+ vo.getASK_DoctorID() );				if(StringUtil.isNotEmpty(vo.getQD_DocFreeIDs())){					condition					.append(" AND (QD_SourceType = 2  or ( QD_SourceType = 3 and (   QD_QuesType = 2 and QD_DocFreeID in ( " + vo.getQD_DocFreeIDs() +") )) )");				}else{					condition					.append(" AND (QD_SourceType = 2   ) ");				}				orderBy.append("ORDER BY QUESMAIN_CreateTime DESC");			} else if (queStatus == 1) {// 已回复				condition.append(" AND  ASK_DoctorID = "						+ vo.getASK_DoctorID()  + " ");				condition						.append(" AND QD_IsReplay = 1 AND QD_IsUserReplay =0 AND QD_Status =0  AND QD_DocReplayCount > 0 ");				if(StringUtil.isNotEmpty(vo.getQD_DocFreeIDs())){					condition					.append(" AND (QD_SourceType = 2  or ( QD_SourceType = 3 and (   QD_QuesType = 2 and QD_DocFreeID in ( " + vo.getQD_DocFreeIDs() +") )) )");				}else{					condition					.append(" AND (QD_SourceType = 2   ) ");				}				orderBy.append("ORDER BY QUESMAIN_CreateTime DESC");			} else if (queStatus == 2) {// 已关闭				if(StringUtil.isNotEmpty(vo.getQD_DocFreeIDs())){					condition					.append(" AND ( (QD_SourceType = 2 and ASK_DoctorID = " + vo.getASK_DoctorID() +"  ) or ( QD_SourceType = 3 and (   QD_QuesType = 2 and QD_DocFreeID in ( " + vo.getQD_DocFreeIDs() +") ) )");				}else{					condition					.append(" AND (QD_SourceType = 2   ) ");					condition.append("   ASK_DoctorID = "							+ vo.getASK_DoctorID() );				}				condition						.append(" ) AND (QD_Status=1  or   QD_Status=2 ) AND  QD_DocReplayCount >0 ");				orderBy.append(" order by QUESMAIN_ID ASC ");			}		} else if (quesType == 3) {// 公共问题			condition					.append("AND QUESMAIN_Status = 1 AND (QD_CheckStatus = 1 or QD_CheckStatus=3) AND QD_SourceType = 1"							+ " AND  CHARINDEX("							+ "',"							+ vo.getQD_DeptTwoIDS()							+ ",'" + ",QD_DeptTwoIDS)> 0 ");			if (queStatus == -1) {// 未领取				condition						.append(" AND QD_IsReplay = 0 AND QD_IsUserReplay = 1 AND QD_Status = 0 AND QD_DocReplayCount = 0 AND"								+ " ( q.ASK_DoctorID = 0  OR  (q.ASK_DoctorID > 0 AND DATEDIFF(MINUTE,QD_RecordExpiredTime,GETDATE())>0) )");				orderBy.append(" ORDER BY  (CASE WHEN ASK_CityID=" + cityID						+ " AND ASK_ProvinceID=" + provinceID						+ " THEN 3 WHEN ASK_CityID<>" + cityID						+ " AND ASK_ProvinceID=" + provinceID						+ " THEN 2 ELSE 1 end) DESC,QUESMAIN_CreateTime desc ");				/*condition2.append(" AND ASK_ProvinceID =  " + provinceID);				condition2.append(" OR ( ASK_ProvinceID <>  " + provinceID);*/				/* condition2						.append("    AND DATEDIFF(MINUTE, QUESMAIN_CreateTime, GETDATE()) > 180 "); */				//condition2.append("  )");			} else if (queStatus == 0) {// 未回复				condition						.append("   AND QD_IsReplay = 0 AND QD_IsUserReplay = 1 AND QD_Status = 0  AND (QD_DocReplayCount > 0"								+ " OR (QD_DocReplayCount=0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0))");				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());				orderBy.append(" order by QUESMAIN_ID ASC ");			} else if (queStatus == 1) {// 已回复				condition						.append(" AND  ASK_DoctorID = " + vo.getASK_DoctorID());				condition						.append("  AND QD_IsReplay = 1 AND QD_IsUserReplay =0 AND QD_Status = 0 and QD_DocReplayCount > 0");				orderBy.append("ORDER BY QUESMAIN_CreateTime DESC");			} else if (queStatus == 2) {// 已关闭				condition.append(" AND q.ASK_DoctorID = "						+ vo.getASK_DoctorID());				condition						.append(" AND (QD_Status = 1 OR QD_Status =2 )  AND QD_DocReplayCount > 0");				orderBy.append("order by QUESMAIN_ID ASC ");			}		}		sql.addVar("@c", condition2.toString());		sql.addVar("@orderBy", orderBy.toString());		sql.addVar("@condition", condition.toString());		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@page", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@page", "");		}		//System.out.println(sql.toString());		com.common.json.JSONObject rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();	}		/**	 * WEB获取医生问题列表（问题库）	 */	public String queryDesignationQuestionLibraryList(QuesMainVo vo, Integer quesType,			Integer queStatus, Integer provinceID, Integer cityID,			Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryDoctorQuestionLibraryList);		StringBuilder condition = new StringBuilder();		StringBuilder orderBy = new StringBuilder();		StringBuilder condition2 = new StringBuilder();		 if (quesType == 3) {// 公共问题			condition					.append(" AND QD_SourceType = 1"							+ " AND  CHARINDEX("							+ "',"							+ vo.getQD_DeptTwoIDS()							+ ",'" + ",QD_DeptTwoIDS)> 0 ");			orderBy.append("  order by QUESMAIN_ID ASC ");		}		sql.addVar("@c", condition2.toString());		sql.addVar("@orderBy", orderBy.toString());		sql.addVar("@condition", condition.toString());		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@page", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@page", "");		}		// System.out.println(sql.toString());		com.common.json.JSONObject rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();	}	/**	 * WEB获取医生问题列表总数（问题库）	 */	public Integer queryDoctorQuestionLibraryListCount(QuesMainVo vo, Integer quesType,			Integer queStatus, Integer provinceID) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queryDoctorQuestionLibraryListCount);		StringBuilder condition = new StringBuilder();		StringBuilder condition2 = new StringBuilder();		 if (quesType == 3) {// 公共问题				condition						.append(" AND QD_SourceType = 1"								+ " AND  CHARINDEX("								+ "',"								+ vo.getQD_DeptTwoIDS()								+ ",'" + ",QD_DeptTwoIDS)> 0 ");			}		sql.addVar("@c", condition2.toString());		sql.addVar("@condition", condition.toString());		// System.out.println(sql.toString());		Integer rt = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}			/**	 * 获取医生问题列表根据状态	 */	public List<QuesMainVo> queryQuesMainListByStatus(QuesMainVo vo,			Integer start, Integer pageSize) throws Exception {		Sql sql = DB.me().createSql(				QuesMainSqlNameEnum.queryQuesMainListByCondition);		StringBuilder condition = new StringBuilder();		if (StringUtil.isNotEmpty(vo.getQD_Statuss())) {			condition.append(" and  QD_Status in ( " + vo.getQD_Statuss()					+ " )");		}		if (vo.getASK_UserID() != null) {			condition.append(" and  ASK_UserID =" + vo.getASK_UserID());		}		if(StringUtil.isNotEmpty(vo.getUserIDs())){			condition.append(" and  ASK_UserID  in ( " +vo.getUserIDs() + ") "  );		} 		condition.append(" and (QUESMAIN_Status =0 or QUESMAIN_Status = 1)");		sql.addVar("@condition", condition.toString());		if (start != 0 || pageSize != 0) {			sql.addVar("@page", " and rowId >" + start + " and rowId <"					+ (start + pageSize + 1));		} else {			sql.addVar("@page", "");		}		List<QuesMainVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, QuesMainVo.class);		return list;	}	/**	 * 获取问题列表	 */	public List<QuesMainVo> queryQuesMainListForDoctor(QuesMainVo vo,			Integer start, Integer pageSize) throws Exception {		Sql sql = DB.me().createSql(				QuesMainSqlNameEnum.queryQuesMainListByCondition);		StringBuilder condition = new StringBuilder();		if (StringUtil.isNotEmpty(vo.getQD_Statuss())) {			condition.append(" and  QD_Status in ( " + vo.getQD_Statuss()					+ " )");		}		if (vo.getASK_UserID() != null) {			condition.append(" and  ASK_UserID =" + vo.getASK_UserID());		}		if (vo.getASK_DoctorID() != null) {			condition.append(" and  ASK_DoctorID = " + vo.getASK_UserID());		}		sql.addVar("@condition", condition.toString());		if (start != 0 || pageSize != 0) {			sql.addVar("@page", " and rowId >" + start + " and rowId <"					+ (start + pageSize + 1));		} else {			sql.addVar("@page", "");		}		List<QuesMainVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, QuesMainVo.class);		return list;	}	/**	 * 获取问题列表数量	 */	public int queryQuesMainListByStatusCount(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.querySameQueCont);		StringBuilder condition = new StringBuilder();		if (StringUtil.isNotEmpty(vo.getQD_Statuss())) {			condition.append(" and  QD_Status in (  " + vo.getQD_Statuss()					+ " )");		}		condition.append(" and (QUESMAIN_Status =0 or QUESMAIN_Status = 1)");		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		int rt = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}	public int  queryQuesMainListByStatusCountForUser(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.querySameQueCont);		StringBuilder condition = new StringBuilder();		if (StringUtil.isNotEmpty(vo.getQD_Statuss())) {			condition.append(" and  QD_Status in ( " + vo.getQD_Statuss()					+ " )");		}		if (vo.getASK_UserID() != null) {			condition.append(" and  ASK_UserID =" + vo.getASK_UserID());		}		if (vo.getASK_DoctorID() != null) {			condition.append(" and  ASK_DoctorID = " + vo.getASK_UserID());		}		if(StringUtil.isNotEmpty(vo.getUserIDs())){			condition.append(" and  ASK_UserID  in ( " +vo.getUserIDs() + ") "  );		} 		condition.append(" and (QUESMAIN_Status =0 or QUESMAIN_Status = 1)");		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		int rt = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}	/**	 * 获取问题列表(报表)	 */	public List<QuesMainVo> getReportList(QuesMainVo vo, int start, int pageSize)			throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.getReportList);		StringBuilder condition = new StringBuilder();		if (vo.getASK_DoctorID() != 0) {			condition.append(" and BaseDoctorID =" + vo.getASK_DoctorID());		}		if (vo.getASK_UserID() != null) {			condition.append(" and ASK_UserID =" + vo.getASK_UserID());		}		if (StringUtil.isNotEmpty(vo.getASK_UserName())) {			condition.append(" and ASK_UserName =?");			sql.addParamValue(vo.getASK_UserName());		} else {			condition					.append(" and ( ASK_UserName ='' or ASK_UserName is null) ");		}		sql.addVar("@condition", condition.toString());		List<QuesMainVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, QuesMainVo.class, start,				pageSize);		return list;	}	/**	 * 获取问题列表(报表)数量	 */	public int getReportListCount(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.getReportListCount);		StringBuilder condition = new StringBuilder();		if (vo.getASK_DoctorID() != 0) {			condition.append(" and BaseDoctorID =" + vo.getASK_DoctorID());		}		if (vo.getASK_UserID() != null) {			condition.append(" and ASK_UserID =" + vo.getASK_UserID());		}		if (StringUtil.isNotEmpty(vo.getASK_UserName())) {			condition.append(" and ASK_UserName =?");			sql.addParamValue(vo.getASK_UserName());		} else {			condition					.append(" and ( ASK_UserName ='' or ASK_UserName is null) ");		}		sql.addVar("@condition", condition.toString());		int rt = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}	/**	 * 添加	 */	public int insertQuesMain(QuesMainVo vo) throws Exception {		try {			int r = DB.me().insert(					MyDatabaseEnum.YiHuNet2008,					DB.me().createInsertSql(vo, MyTableNameEnum.ZiXun_QuesMain,							"dbo"));			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	/**	 * 修改	 */	public void updateQuesMainByCondition(QuesMainVo vo, JdbcConnection conn)			throws Exception {		Sql sql = DB.me().createSql(				QuesMainSqlNameEnum.updateQuesMainByCondition);		if (vo == null || StringUtil.isEmpty(vo.getQUESMAIN_ID())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {			throw new Exception("未有更新SQL被执行！");		} else {			sql.addVar("@condition", condition.toString());			sql.addParamValue(vo.getQUESMAIN_ID());		}		DB.me().update(conn, sql);	}	/**	 * 更新	 */	public int updateQMainByCondition(QuesMainVo vo, JdbcConnection conn)			throws Exception {		try {			Sql sql = DB.me().createSql(					QuesMainSqlNameEnum.updateQMainByCondition);			if (vo == null || StringUtil.isEmpty(vo.getQUESMAIN_ID())) {				return -1;			}			StringBuilder condition = new StringBuilder();			if (vo.getQD_Price() != null) {				condition.append(",QD_Price=" + vo.getQD_Price());			}			if (vo.getQD_OrdersStatus() != null) {				condition.append(",QD_OrdersStatus=" + vo.getQD_OrdersStatus());			}			if (StringUtil.isNotEmpty(vo.getQUESMAIN_CreateTime())) {				condition.append(",QUESMAIN_CreateTime = ? ");				sql.addParamValue(vo.getQUESMAIN_CreateTime());			}			if (vo.getQD_DocReplayCount() != null) {				condition.append(",QD_DocReplayCount =  "						+ vo.getQD_DocReplayCount());			}			if (vo.getQD_CheckStatus() != null) {				condition.append(",QD_CheckStatus =  "						+vo.getQD_CheckStatus());			}			if (vo.getASK_DoctorID() != null) {				condition.append(",ASK_DoctorID =  " + vo.getASK_DoctorID());			}			if (vo.getQD_IsUserReplay() != null) {				condition.append(",QD_IsUserReplay   =  "						+ vo.getQD_IsUserReplay());			}			if (vo.getQD_DoctorGetPrice() != null) {				condition.append(",QD_DoctorGetPrice   =  "						+ vo.getQD_DoctorGetPrice());			}			if (vo.getQD_IsReplay() != null) {				condition.append(",QD_IsReplay =  " + vo.getQD_IsReplay());			}			if (vo.getQD_FilesCount() != null) {				condition.append(",QD_FilesCount =  " + vo.getQD_FilesCount());			}			if (vo.getQD_IsAppAttend() != null) {				condition						.append(",QD_IsAppAttend =  " + vo.getQD_IsAppAttend());			}			//加入状态			if (vo.getQD_Status() != null) {				condition						.append(",QD_Status =  " + vo.getQD_Status());			}			String left = condition.substring(0, 1);			if (left.equals(",")) {				condition.delete(0, 1);			}			if (condition.length() == 0) {				return -1;			} else {				sql.addVar("@condition", condition.toString());				sql.addParamValue(vo.getQUESMAIN_ID());				sql.addParamValue(vo.getASK_UserID());			}			System.out.println("sql"+sql.toString());			DB.me().update(conn, sql);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}		return 0;	}	/**	 * 更新	 */	public int updateQuesMain(QuesMainVo vo) throws Exception {		try {			StringBuilder condition = new StringBuilder();			if (vo.getQUESMAIN_ID() > 0) {				condition.append("  QUESMAIN_ID = " + vo.getQUESMAIN_ID());				vo.setQUESMAIN_ID(null);				int r = DB.me().update(						MyDatabaseEnum.YiHuNet2008,						DB.me().createUpdateSql(vo,								MyTableNameEnum.ZiXun_QuesMain,								condition.toString()));				return r;			} else {				return -1;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	/**	 * 通过对象查询问题。	 * 	 * @param vo	 * @return	 * @throws Exception	 */	public QuesMainVo queryQuesMainByCondition(QuesMainVo vo) throws Exception {		List<QuesMainVo> list = this.queryQuesMainListByCondition(vo);		if (list == null || list.size() == 0) {			return null;		} else {			return list.get(0);		}	}	public QuesMainVo queryQuestionLibraryByCondition(QuesMainVo vo)			throws Exception {		List<QuesMainVo> list = this.queryQuestionLibraryListByCondition(vo);		if (list == null || list.size() == 0) {			return null;		} else {			return list.get(0);		}	}	public String quesDoctorCheckList(QuesMainVo vo,String beginTIme,String endTIme,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesDoctorCheckList);		StringBuilder condition = new StringBuilder();		if (vo.getQD_CheckStatus() != null) {			if( vo.getQD_CheckStatus()==1){				condition.append(" and QD_CheckStatus =" + vo.getQD_CheckStatus() );				condition.append(" and QD_CheckManID = 0" );			}else{				condition.append(" and QD_CheckStatus =" + vo.getQD_CheckStatus());			}		}		if(StringUtil.isNotEmpty(beginTIme)){			condition.append(" and QUESMAIN_CreateTime  > ?");			sql.addParamValue(beginTIme);		}		if(StringUtil.isNotEmpty(endTIme)){			condition.append(" and ? > QUESMAIN_CreateTime   ");			sql.addParamValue(endTIme);		}		if(vo.getQD_CheckManID()!=null){			condition.append(" and  QD_CheckManID =   " + vo.getQD_CheckManID());		}		if(StringUtil.isNotEmpty(vo.getQUESMAIN_Content())){			condition.append("  and QUESMAIN_Content like '%@t%'"  );			sql.addVar("@t", vo.getQUESMAIN_Content());		}		sql.addVar("@condition", condition.toString());		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@page", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@page", "");		}		sql.toString();		//System.out.println(sql.toString());		com.common.json.JSONObject rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();	}	public Integer quesDoctorCheckListCount(QuesMainVo vo,String beginTIme,String endTIme) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesDoctorCheckListCount);		StringBuilder condition = new StringBuilder();		if (vo.getQD_CheckStatus() != null) {			condition.append(" and QD_CheckStatus =" + vo.getQD_CheckStatus());		}		if(StringUtil.isNotEmpty(beginTIme)){			condition.append(" and QUESMAIN_CreateTime  > ?");			sql.addParamValue(beginTIme);		}		if(StringUtil.isNotEmpty(endTIme)){			condition.append(" and ? > QUESMAIN_CreateTime   ");			sql.addParamValue(endTIme);		}		if(vo.getQD_CheckManID()!=null){			condition.append(" and  QD_CheckManID =   " + vo.getQD_CheckManID());		}		if(StringUtil.isNotEmpty(vo.getQUESMAIN_Content())){			condition.append("  and QUESMAIN_Content like '%@t%'"  );			sql.addVar("@t", vo.getQUESMAIN_Content());		}		sql.addVar("@condition", condition.toString());		/*if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@page", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@page", "");		}*/		sql.toString();		 //System.out.println(sql.toString());		 Integer rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return  rt;	}		public String quesReturnList(QuesMainVo vo,String beginTIme,String endTIme,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesReturnList);				StringBuilder condition = new StringBuilder();		if(StringUtil.isNotEmpty(beginTIme)){			condition.append(" and QUESMAIN_CreateTime  > ?");			sql.addParamValue(beginTIme);		}		if(StringUtil.isNotEmpty(endTIme)){			condition.append(" and ? > QUESMAIN_CreateTime   ");			sql.addParamValue(endTIme);		}		if(vo.getQD_CheckManID()!=null){			condition.append("  and QD_CheckManID =   " + vo.getQD_CheckManID());		}		if(StringUtil.isNotEmpty(vo.getQUESMAIN_Content())){			condition.append("  and QUESMAIN_Content like '%@t%'"  );			sql.addVar("@t", vo.getQUESMAIN_Content());		}		sql.addVar("@condition", condition.toString());		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@page", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@page", "");		}		sql.toString();		// System.out.println(sql.toString());		com.common.json.JSONObject rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();	}			public Integer quesReturnListCount(QuesMainVo vo,String beginTIme,String endTIme) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesReturnListCount);				StringBuilder condition = new StringBuilder();		if(StringUtil.isNotEmpty(beginTIme)){			condition.append(" and QUESMAIN_CreateTime  > ?");			sql.addParamValue(beginTIme);		}		if(StringUtil.isNotEmpty(endTIme)){			condition.append(" and ? > QUESMAIN_CreateTime   ");			sql.addParamValue(endTIme);		}		if(vo.getQD_CheckManID()!=null){			condition.append("  and QD_CheckManID =   " + vo.getQD_CheckManID());		}		if(StringUtil.isNotEmpty(vo.getQUESMAIN_Content())){			condition.append("  and QUESMAIN_Content like '%@t%'"  );			sql.addVar("@t", vo.getQUESMAIN_Content());		}		sql.addVar("@condition", condition.toString());		sql.toString();		// System.out.println(sql.toString());		 Integer rt = DB.me().queryForInteger(					MyDatabaseEnum.YiHuNet2008, sql);			return  rt;	}			public String quesFreeOverTimeList(QuesMainVo vo,int type,int iffree,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql ;		if(type > 0 ){			 sql = DB.me().createSql(QuesMainSqlNameEnum.quesOverTimeTearmList);			}else{			 sql = DB.me().createSql(QuesMainSqlNameEnum.quesOverTimeList);			}		StringBuilder condition = new StringBuilder();		if (type == 1) {			condition.append(" AND ASK_DoctorID= " + vo.getASK_DoctorID());			condition.append("  AND  QD_IsReplay=0 AND QD_IsUserReplay=1  AND (QD_DocReplayCount>0 OR (QD_DocReplayCount=0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0)) and QD_Status=0  ");		}else if(type == 2){			condition.append(" AND ASK_DoctorID= " + vo.getASK_DoctorID());			condition.append(" AND  QD_IsReplay=1 AND QD_IsUserReplay=0  AND QD_DocReplayCount>0  AND QD_Status=0 ");		}else if(type == 3){			condition.append(" AND ASK_DoctorID= " + vo.getASK_DoctorID());			condition.append(" AND QD_DocReplayCount>0 AND (QD_Status=1 OR QD_Status=2 )");		}else if(type == 4){			condition.append(" AND ASK_DoctorID in (710002563,710003628,710003629,710003630,710003631,710003632,710003633)" );			condition.append(" AND  QD_IsReplay=0  AND QD_IsUserReplay=1 AND (QD_DocReplayCount>0 OR (QD_DocReplayCount=0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0)) ");					}		if(iffree==1){			condition.append(" and QD_SourceType != 1 ");		}else if(iffree==2){			condition.append(" and QD_SourceType = 1 ");		}		sql.addVar("@condition", condition.toString());		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@page", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@page", "");		}		sql.toString();		//System.out.println(sql.toString());		com.common.json.JSONObject rt;		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();	}			public Integer quesFreeOverTimeListCount(QuesMainVo vo,int type,int iffree) throws Exception {		Sql sql;		if(type>0){			sql= DB.me().createSql(QuesMainSqlNameEnum.quesOverTimeTeamListCount);				}else{			sql= DB.me().createSql(QuesMainSqlNameEnum.quesOverTimeListCount);				}		StringBuilder condition = new StringBuilder();		if (type == 1) {			condition.append(" AND ASK_DoctorID= " + vo.getASK_DoctorID());			condition.append("  AND  QD_IsReplay=0 AND QD_IsUserReplay=1  AND (QD_DocReplayCount>0 OR (QD_DocReplayCount=0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0)) and QD_Status=0  ");		}else if(type == 2){			condition.append(" AND ASK_DoctorID= " + vo.getASK_DoctorID());			condition.append(" AND  QD_IsReplay=1 AND QD_IsUserReplay=0  AND QD_DocReplayCount>0  AND QD_Status=0 ");					}else if(type == 3){			condition.append(" AND ASK_DoctorID= " + vo.getASK_DoctorID());			condition.append(" AND QD_DocReplayCount>0 AND (QD_Status=1 OR QD_Status=2 )  ");				}else if(type == 4){			condition.append(" AND ASK_DoctorID in (710002563,710003628,710003629,710003630,710003631,710003632,710003633)" );			condition.append(" AND  QD_IsReplay=0  AND QD_IsUserReplay=1 AND (QD_DocReplayCount>0 OR (QD_DocReplayCount=0 AND DATEDIFF(MINUTE,GETDATE(),QD_RecordExpiredTime)>0))  ");		}		if(iffree==1){			condition.append(" and QD_SourceType != 1 ");		}else if(iffree==2){			condition.append(" and QD_SourceType =1 ");		}		sql.addVar("@condition", condition.toString());		sql.toString();		//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}		public String quesListForCheckTeam(QuesMainVo vo,Integer dcid,Integer dcrid,int type,String btime,String etime,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForCheckTeam);				StringBuilder condition = new StringBuilder();		if (type == 0) {//未回复			condition			.append(" AND QD_IsReplay = 0 AND QD_IsUserReplay=1 AND QD_Status = 0     AND (QD_DocReplayCount > 0 "					+ " OR (DATEDIFF(MINUTE,GETDATE(),QUESMAIN_ExpiredTime) > 0 AND QD_DocReplayCount =0)) ");		}else if(type == 1){//已回复			condition			.append(" AND QD_IsReplay = 1 AND QD_IsUserReplay=0 AND QD_DocReplayCount > 0 AND QD_Status=0");		}else if(type == 2){//已追问			condition			.append(" AND QD_IsReplay =0 AND QD_IsUserReplay=1 AND QD_DocReplayCount > 0 AND QD_Status=0");		}else if(type == 3){//已关闭			condition.append(" AND  (QD_Status=1 or QD_Status = 2) ");		}		if(dcid !=null){			condition.append("  and d2.ProvinceID =   " + dcid);		}		if(dcrid !=null){			condition.append("  and d1.ProvinceID =   " +dcrid);		}		if(vo.getQD_SourceType()!=null){			condition.append("  and QD_SourceType =   " + vo.getQD_SourceType());		}		if(vo.getQUESMAIN_Platform()!=null){			condition.append("  and QUESMAIN_Platform =   " + vo.getQUESMAIN_Platform());		}		if(vo.getQD_OrdersStatus()!=null){			condition.append("  and QD_OrdersStatus =   " + vo.getQD_OrdersStatus());		}		if(StringUtil.isNotEmpty(btime)){			condition.append(" and QUESMAIN_CreateTime >= ? " );			sql.addParamValue(btime);		}		if(StringUtil.isNotEmpty(etime)){			condition.append(" and QUESMAIN_CreateTime <= ? " );			sql.addParamValue(etime);		}		if(vo.getASK_UserID()!=null){			condition.append("  and q1.ASK_UserID =   " + vo.getASK_UserID());		}		if(vo.getProvinceID() !=null){			condition.append("  and ASK_ProvinceID =   " + vo.getProvinceID());		}		if(StringUtil.isNotEmpty(vo.getAskDocName())){			condition.append("  and d1.DoctorName   like  @n " );			sql.addVar("@n", "'%" + vo.getAskDocName()+"%'" );		}		if(StringUtil.isNotEmpty(vo.getQUESMAIN_Content())){			condition.append("  and QUESMAIN_Content like @c  " );			sql.addVar("@c", "'%" + vo.getQUESMAIN_Content()+"%'" );		}		sql.addVar("@condition", condition.toString());		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@page", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@page", "");		}		sql.toString();		//System.out.println(sql.toString());		com.common.json.JSONObject rt;		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();	}			public Integer quesListCountForCheckTeam(QuesMainVo vo,Integer dcid,Integer dcrid,int type,String btime,String etime) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListCountForCheckTeam);				StringBuilder condition = new StringBuilder();		if (type == 0) {//未回复			condition			.append(" AND QD_IsReplay = 0 AND QD_IsUserReplay=1 AND QD_Status = 0     AND (QD_DocReplayCount > 0 "					+ " OR (DATEDIFF(MINUTE,GETDATE(),QUESMAIN_ExpiredTime) > 0 AND QD_DocReplayCount =0)) ");		}else if(type == 1){//已回复			condition			.append(" AND QD_IsReplay = 1 AND QD_IsUserReplay=0 AND QD_DocReplayCount > 0 AND QD_Status=0");		}else if(type == 2){//已追问			condition			.append(" AND QD_IsReplay =0 AND QD_IsUserReplay=1 AND QD_DocReplayCount > 0 AND QD_Status=0");		}else if(type == 3){//已关闭			condition.append(" AND  (QD_Status=1 or QD_Status = 2) ");		}		if(StringUtil.isNotEmpty(btime)){			condition.append(" and QUESMAIN_CreateTime >= ? " );			sql.addParamValue(btime);		}		if(StringUtil.isNotEmpty(etime)){			condition.append(" and QUESMAIN_CreateTime <= ? " );			sql.addParamValue(etime);		}		if(dcid !=null){			condition.append("  and d2.ProvinceID =   " + dcid);		}		if(dcrid !=null){			condition.append("  and d1.ProvinceID =   " +dcrid);		}		if(vo.getQD_SourceType()!=null){			condition.append("  and QD_SourceType =   " + vo.getQD_SourceType());		}		if(vo.getQUESMAIN_Platform()!=null){			condition.append("  and QUESMAIN_Platform =   " + vo.getQUESMAIN_Platform());		}		if(vo.getQD_OrdersStatus()!=null){			condition.append("  and QD_OrdersStatus =   " + vo.getQD_OrdersStatus());		}		if(vo.getProvinceID() !=null){			condition.append("  and ASK_ProvinceID =   " + vo.getProvinceID());		}		if(vo.getASK_UserID()!=null){			condition.append("  and q1.ASK_UserID =   " + vo.getASK_UserID());		}		if(StringUtil.isNotEmpty(vo.getAskDocName())){			condition.append("  and d1.DoctorName   like  @n " );			sql.addVar("@n", "'%" + vo.getAskDocName()+"%'" );		}		if(StringUtil.isNotEmpty(vo.getQUESMAIN_Content())){			condition.append("  and QUESMAIN_Content like @c  " );			sql.addVar("@c", "'%" + vo.getQUESMAIN_Content()+"%'" );		}		sql.addVar("@condition", condition.toString());		sql.toString();				int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;	}		public String quesDcSubCheck(QuesMainVo vo,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListDcSubOver);				StringBuilder condition = new StringBuilder();		if(vo.getQD_CheckStatus() !=null){			if(vo.getQD_CheckStatus()  == 0){				condition.append("  and QD_CheckStatus =  3"  );			}else{				condition.append("  and QD_CheckStatus !=  3"  );			}		}		condition.append("  and QD_SourceType =  0"  );		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@page", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@page", "");		}		sql.addVar("@condition", condition.toString());		sql.toString();		System.out.println(sql.toString());		com.common.json.JSONObject rt;		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}	public Integer quesDcSubCheckCount(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListDcSubOverCount);				StringBuilder condition = new StringBuilder();		if(vo.getQD_CheckStatus() !=null){			if(vo.getQD_CheckStatus()  == 0){				condition.append("  and QD_CheckStatus =  3"  );			}else{				condition.append("  and QD_CheckStatus !=  3"  );			}		}		condition.append("  and QD_SourceType =  0"  );		sql.addVar("@condition", condition.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}		public String quesListForDoctorWaitAnswerDepts(QuesMainVo vo,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorWaitAnswerDepts);				StringBuilder condition = new StringBuilder();		StringBuilder condition2 = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(vo.getASK_UserID()!=null){			condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());		}		if(vo.getQD_AskDeptID()!= null){			condition2.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());		}		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar("@c", condition2.toString());		sql.addVar("@d", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		//System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}	public Integer quesListForDoctorWaitAnswerDeptsCount(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorWaitAnswerDeptsCount);				StringBuilder condition = new StringBuilder();		StringBuilder condition2 = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(vo.getQD_AskDeptID()!= null){			condition2.append(" and QD_AskDeptID = " + vo.getQD_AskDeptID());		}		sql.addVar("@c", condition2.toString());		sql.addVar("@d", condition.toString());				//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}	public String quesListForDoctorWaitAnswer(QuesMainVo vo,Integer pageSize, Integer pageIndex,int searchType,String disease) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorWaitAnswer);				StringBuilder condition = new StringBuilder();		StringBuilder condition2 = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(searchType ==2){			JSONArray disJsons = JSONArray.fromObject(disease);			if(disJsons.size()>0){				condition2.append("  	AND d.ASK_DiseaseID IN (   " );				String str ="";				for(int i = 0 ; i <disJsons.size();i++){					str = str + disJsons.getJSONObject(i).get("diseaseId") + ",";												}				str = StringUtils.substringBeforeLast(str,",");				condition2.append(str + ")");			}					}else{			if (StringUtil.isNotEmpty(vo.getQD_DeptTwoIDS())) {				condition2.append("   AND  ( " );								String bigDepartment = DBCache.smallDepartmentBigDepartmentTranslation.get(vo.getQD_DeptTwoIDS());				Map<String, String> smallDepartmentList =DBCache.smallDepartmentListBySn.get(bigDepartment);				int i =0 ;				Set<String> set = smallDepartmentList.keySet();				for (String key : set) {					if(i==0){						condition2.append( "    CHARINDEX("								+ "'," + key+ ",'"								+ ",QD_DeptTwoIDS)> 0 " );					}else{						condition2.append( "  OR   CHARINDEX("								+ "'," + key+ ",'"								+ ",QD_DeptTwoIDS)> 0 " );					}					i=i+1;					//array.add(obj);				}				condition2.append( " ) ");			}		}				if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar("@c", condition.toString());		sql.addVar("@d", condition2.toString());		sql.toString();		com.common.json.JSONObject rt;		//System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}		public String quesListForDoctorWaitAnswerFreeQues(QuesMainVo vo,Integer pageSize, Integer pageIndex,int searchType,String stones,int proid) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorWaitAnswerFreeQues);				StringBuilder condition = new StringBuilder();		StringBuilder condition2 = new StringBuilder();		StringBuilder orderby = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(searchType ==1){//1为疾病 2为科室			JSONArray disJsons = JSONArray.fromObject(stones);			if(disJsons.size()>0){				condition2.append("  	AND d.ASK_DiseaseID IN (   " );				String str ="";				for(int i = 0 ; i <disJsons.size();i++){					str = str + disJsons.getJSONObject(i).get("seachID") + ",";												}				str = StringUtils.substringBeforeLast(str,",");				condition2.append(str + ")");			}		}else{			JSONArray depts = JSONArray.fromObject(stones);			condition2.append("   AND  ( " );			if(depts.size()>0){				String str ="";				for(int i = 0 ; i <depts.size();i++){					if(i == 0){						str = str +  "    CHARINDEX("								+ "'," + 	depts.getJSONObject(i).get("seachID")+ ",'"								+ ",QD_DeptTwoIDS)> 0  " ;					}else{						str = str +  "  OR  CHARINDEX("								+ "'," + 	depts.getJSONObject(i).get("seachID")+ ",'"								+ ",QD_DeptTwoIDS)> 0  " ;					}									}				condition2.append(str );			}			condition2.append( " ) ");		}				if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		if(proid >0 ){			orderby.append(" ( CASE WHEN provinceID =  " +  proid + " THEN 1 ELSE 2 END   )  ASC,     provinceID ASC ,");			sql.addVar("@order", orderby.toString());		}		sql.addVar("@d", condition2.toString());		sql.toString();		com.common.json.JSONObject rt;		System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}	public Integer quesListForDoctorWaitAnswerFreeQuesCount(QuesMainVo vo,int searchType,String stones) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorWaitAnswerFreeQuesCount);				StringBuilder condition = new StringBuilder();		StringBuilder condition2 = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(vo.getASK_UserID()!=null){			condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());		}		/*if (StringUtil.isNotEmpty(vo.getQD_DeptTwoIDS())) {			condition2.append(" and  QD_SourceType = 1" + " AND  CHARINDEX("					+ "'," + vo.getQD_DeptTwoIDS() + ",'"					+ ",QD_DeptTwoIDS)> 0 ");		}*/		if(searchType ==1){//1为疾病 0为科室			JSONArray disJsons = JSONArray.fromObject(stones);			if(disJsons.size()>0){				condition2.append("  	AND d.ASK_DiseaseID IN (   " );				String str ="";				for(int i = 0 ; i <disJsons.size();i++){					str = str + disJsons.getJSONObject(i).get("seachID") + ",";												}				str = StringUtils.substringBeforeLast(str,",");				condition2.append(str + ")");			}					}else{			JSONArray depts = JSONArray.fromObject(stones);			condition2.append("   AND  ( " );			if(depts.size()>0){				String str ="";				for(int i = 0 ; i <depts.size();i++){					if(i == 0){						str = str +  "    CHARINDEX("								+ "'," + 	depts.getJSONObject(i).get("seachID")+ ",'"								+ ",QD_DeptTwoIDS)> 0  " ;					}else{						str = str +  "  OR  CHARINDEX("								+ "'," + 	depts.getJSONObject(i).get("seachID")+ ",'"								+ ",QD_DeptTwoIDS)> 0  " ;					}									}				condition2.append(str );			}			condition2.append( " ) ");		}		sql.addVar("@d", condition2.toString());		//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}	public String quesListForDoctorWaitAnswerNoFreeQues(QuesMainVo vo,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorWaitAnswerForNoFreeQue);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}				if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar("@c", condition.toString());		//sql.addVar("@d", condition2.toString());		sql.toString();		com.common.json.JSONObject rt;		//System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}		public Integer quesListForDoctorWaitAnswerCountNoFreeQues(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorWaitAnswerForNoFreeQueCount);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(vo.getASK_UserID()!=null){			condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());		}		sql.addVar("@c", condition.toString());		//sql.addVar("@d", condition2.toString());		//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}	public Integer quesListForDoctorWaitAnswerCount(QuesMainVo vo,int searchType,String disease) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorWaitAnswerCount);				StringBuilder condition = new StringBuilder();		StringBuilder condition2 = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(vo.getASK_UserID()!=null){			condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());		}		/*if (StringUtil.isNotEmpty(vo.getQD_DeptTwoIDS())) {			condition2.append(" and  QD_SourceType = 1" + " AND  CHARINDEX("					+ "'," + vo.getQD_DeptTwoIDS() + ",'"					+ ",QD_DeptTwoIDS)> 0 ");		}*/		if(searchType ==2){			 			JSONArray disJsons = JSONArray.fromObject(disease);			if(disJsons.size()>0){				condition2.append("  	AND d.ASK_DiseaseID IN (   " );				String str ="";				for(int i = 0 ; i <disJsons.size();i++){					str = str + disJsons.getJSONObject(i).get("diseaseId") + ",";												}				str = StringUtils.substringBeforeLast(str,",");				condition2.append(str + ")");			}					}else{			if (StringUtil.isNotEmpty(vo.getQD_DeptTwoIDS())) {				condition2.append("  AND  ( " );								String bigDepartment = DBCache.smallDepartmentBigDepartmentTranslation.get(vo.getQD_DeptTwoIDS());				Map<String, String> smallDepartmentList =DBCache.smallDepartmentListBySn.get(bigDepartment);				int i =0 ;				Set<String> set = smallDepartmentList.keySet();				for (String key : set) {					if(i==0){						condition2.append( "    CHARINDEX("								+ "'," + key+ ",'"								+ ",QD_DeptTwoIDS)> 0 " );					}else{						condition2.append( "  OR   CHARINDEX("								+ "'," + key+ ",'"								+ ",QD_DeptTwoIDS)> 0 " );					}					i=i+1;					//array.add(obj);				}				condition2.append( " ) ");			}		}		sql.addVar("@c", condition.toString());		sql.addVar("@d", condition2.toString());		System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}	public Integer quesListForDoctorWaitAnswerCountNoFree(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorWaitAnswerCountNoFree);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}				sql.addVar("@c", condition.toString());		//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}	public String quesListForDoctorWaitAnswerCountNoFreeLastTime(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesDoctorWaitAnswerLastTime);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		sql.addVar("@c", condition.toString());		//System.out.println(sql.toString());		JSONObject rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}	public String quesListForDoctorAnswerNoOver(QuesMainVo vo,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerNoOver);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(vo.getASK_UserID()!=null){			condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());		}		condition.append("   AND (QD_SourceType = 0 OR QD_SourceType = 1)  "  );		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar(" @c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		//System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}		public Integer quesListForDoctorAnswerNoOverCount(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerNoOverCount);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(vo.getASK_UserID()!=null){			condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());		}		condition.append("   AND (QD_SourceType = 0 OR QD_SourceType = 1)  "  );		sql.addVar("@c", condition.toString());			//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}	public String quesListForDoctorAnswerDeptsNoOver(QuesMainVo vo,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerNoOver);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		condition.append("   AND QD_SourceType = 2 "  );		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar(" @c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		//System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}		public Integer quesListForDoctorAnswerNoOverDeptsCount(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerNoOverCount);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		condition.append("   AND QD_SourceType = 2 "  );		sql.addVar("@c", condition.toString());		//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}		public String quesListForDoctorAnswerAndOver(QuesMainVo vo,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerAndOver);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null ){			if( vo.getASK_DoctorID() > 0){				condition.append(" and t1.ASK_DoctorID = " + vo.getASK_DoctorID());			}			if(vo.getASK_UserID()!=null){				condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());			}		}		if(StringUtil.isNotEmpty(vo.getDoctorUids())){			if(!vo.getDoctorUids().equals("0")){				condition.append(" and t1.ASK_DoctorID  in ( " + vo.getDoctorUids() +" ) ");			}		}		condition.append("   AND (QD_SourceType = 0 OR QD_SourceType = 1)  "  );		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar("@c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}	public Integer quesListForDoctorAnswerAndOverCount(QuesMainVo vo) throws Exception {				Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerAndOverCount);								StringBuilder condition = new StringBuilder();										if (StringUtil.isNotEmpty(vo.getQD_DeptTwoIDS())) {			condition.append("   AND  ( " );						String bigDepartment = DBCache.smallDepartmentBigDepartmentTranslation.get(vo.getQD_DeptTwoIDS());			System.err.println(bigDepartment);			Map<String, String> smallDepartmentList =DBCache.smallDepartmentListBySn.get(bigDepartment);						if(smallDepartmentList==null){				throw new SmallDepartmentListNullException();			}			int i =0 ;			Set<String> set = smallDepartmentList.keySet();			for (String key : set) {				if(i==0){					condition.append( "    CHARINDEX("							+ "'," + key+ ",'"							+ ",QD_DeptTwoIDS)> 0 " );				}else{					condition.append( "  OR   CHARINDEX("							+ "'," + key+ ",'"							+ ",QD_DeptTwoIDS)> 0 " );				}				i=i+1;				//array.add(obj);			}			condition.append( " ) ");		}						if(vo.getASK_DoctorID() !=null ){			if( vo.getASK_DoctorID() > 0){				condition.append(" and t1.ASK_DoctorID = " + vo.getASK_DoctorID());			}			if(vo.getASK_UserID()!=null){				condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());			}		}		if(StringUtil.isNotEmpty(vo.getDoctorUids())){			if(!vo.getDoctorUids().equals("0")){				condition.append(" and t1.ASK_DoctorID  in ( " + vo.getDoctorUids() +" ) ");			}		}		condition.append("   AND (QD_SourceType = 0 OR QD_SourceType = 1)  "  );			sql.addVar("@p", "");				sql.addVar("@c", condition.toString());		System.out.println(sql.toString());				System.out.println(sql.getSqlString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}		public String quesListForDoctorAnswerForDeptsAndOver(QuesMainVo vo,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerAndOver);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null ){			if( vo.getASK_DoctorID() > 0){				condition.append(" and t1.ASK_DoctorID = " + vo.getASK_DoctorID());			}		}		if(vo.getQD_AskDeptID() !=null  ){			condition.append(" and t1.QD_AskDeptID = " + vo.getQD_AskDeptID());		}		//condition.append("   AND QD_SourceType = 2 "  );		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar("@c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}		public String quesListForDoctorAnswerForDeptsAndOverChangzheng(QuesMainVo vo,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerAndOver);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null ){			if( vo.getASK_DoctorID() > 0){				condition.append(" and t1.ASK_DoctorID = " + vo.getASK_DoctorID());			}		}		if(vo.getQD_AskDeptID() !=null  ){			condition.append(" and v.HosDeptID = " + vo.getQD_AskDeptID());		}		//condition.append("   AND QD_SourceType = 2 "  );		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar("@c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}	public Integer quesListForDoctorAnswerForDeptsAndOverCountChangzheng(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerAndOverCountChangzheng);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null && vo.getASK_DoctorID() > 0){			condition.append(" and t1.ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(vo.getQD_AskDeptID() !=null  ){			condition.append(" and v.HosDeptID = " + vo.getQD_AskDeptID());		}		//condition.append("   AND QD_SourceType = 2 "  );		sql.addVar("@c", condition.toString());		//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}		public Integer quesListForDoctorAnswerForDeptsAndOverCount(QuesMainVo vo) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerAndOverCount);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null && vo.getASK_DoctorID() > 0){			condition.append(" and t1.ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(vo.getQD_AskDeptID() !=null  ){			condition.append(" and t1.QD_AskDeptID = " + vo.getQD_AskDeptID());		}		//condition.append("   AND QD_SourceType = 2 "  );		sql.addVar("@c", condition.toString());		//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}		public String queReportForDepts(String time ,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queReportForDepts);				StringBuilder condition = new StringBuilder();		condition.append("'"+time + "'" );		sql.addVar("@c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		//System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}	public Integer queReportForDeptsCount(String time) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queReportForDeptsCount);				StringBuilder condition = new StringBuilder();		condition.append("'"+time + "'" );		sql.addVar("@c", condition.toString());		//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}		public String queReportForDays(String time,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queReportForDays);				StringBuilder condition = new StringBuilder();		condition.append("'"+time + "'" );		sql.addVar("@c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		//System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}	public Integer queReportForDaysCount(String time) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queReportForDaysCount);				StringBuilder condition = new StringBuilder();		condition.append("'"+time + "'" );		sql.addVar("@c", condition.toString());		//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}		public String queReportForCity(String time,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queReportForCity);				StringBuilder condition = new StringBuilder();		condition.append("'"+time + "'" );		sql.addVar("@c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		//System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();	}	public Integer queReportForCityCount(String time) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queReportForCityCount);				StringBuilder condition = new StringBuilder();		condition.append("'"+time + "'" );		sql.addVar("@c", condition.toString());		//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}	public String queReportForPlatform(String time,Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queReportForPlatform);				StringBuilder condition = new StringBuilder();		condition.append("'"+time + "'" );		sql.addVar("@c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		//System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}	public Integer queReportForPlatformCount(String time) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.queReportForPlatformCount);				StringBuilder condition = new StringBuilder();		condition.append("'"+time + "'" );		sql.addVar("@c", condition.toString());		//System.out.println(sql.toString());		int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;		}	/**	 * 通过对象查询问题是否存在。	 * 	 * @param vo	 * @return	 * @throws Exception	 */	public Boolean queryQuesMainExist(QuesMainVo vo) throws Exception {		List<QuesMainVo> list = this.queryQuesMainListByCondition(vo);		if (list == null || list.size() == 0) {			return false;		} else {			return true;		}	}		//TYPE=1	@Override	public String quesListForDoctorAnswerAndOverV2(QuesMainVo vo,			Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerAndOverV2);				StringBuilder condition = new StringBuilder();				if (StringUtil.isNotEmpty(vo.getQD_DeptTwoIDS())) {			condition.append("   AND  ( " );						String bigDepartment = DBCache.smallDepartmentBigDepartmentTranslation.get(vo.getQD_DeptTwoIDS());			Map<String, String> smallDepartmentList =DBCache.smallDepartmentListBySn.get(bigDepartment);						int i =0 ;			Set<String> set = smallDepartmentList.keySet();			for (String key : set) {				if(i==0){					condition.append( "    CHARINDEX("							+ "'," + key+ ",'"							+ ",QD_DeptTwoIDS)> 0 " );				}else{					condition.append( "  OR   CHARINDEX("							+ "'," + key+ ",'"							+ ",QD_DeptTwoIDS)> 0 " );				}				i=i+1;				//array.add(obj);			}			condition.append( " ) ");		}										if(vo.getASK_DoctorID() !=null ){			if( vo.getASK_DoctorID() > 0){				condition.append(" and t1.ASK_DoctorID = " + vo.getASK_DoctorID());			}			if(vo.getASK_UserID()!=null){				condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());			}		}		if(StringUtil.isNotEmpty(vo.getDoctorUids())){			if(!vo.getDoctorUids().equals("0")){				condition.append(" and t1.ASK_DoctorID  in ( " + vo.getDoctorUids() +" ) ");			}		}		condition.append("   AND (QD_SourceType = 0 OR QD_SourceType = 1)  "  );		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar("@c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();					}		//TYPE=2	@Override	public String quesListForDoctorAnswerNoOverV2(QuesMainVo vo,			Integer pageSize, Integer pageIndex) throws Exception {				Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerNoOverV2);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(vo.getASK_UserID()!=null){			condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());		}		condition.append("   AND (QD_SourceType = 0 OR QD_SourceType = 1)  "  );		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar(" @c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();		}		//TYPE=3	@Override	public String quesListForDoctorWaitAnswerNoFreeQuesV2(QuesMainVo vo,			Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorWaitAnswerForNoFreeQueV2);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}				if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar("@c", condition.toString());		//sql.addVar("@d", condition2.toString());		sql.toString();		com.common.json.JSONObject rt;		System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();			}	//TYPE=4	public String quesListForDoctorWaitAnswerFreeQuesV2(QuesMainVo vo,			Integer pageSize, Integer pageIndex, int searchType, String stones,			int proid) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorWaitAnswerFreeQuesV2);				StringBuilder condition = new StringBuilder();		StringBuilder condition2 = new StringBuilder();		StringBuilder orderby = new StringBuilder();		if(vo.getASK_DoctorID() !=null){			condition.append(" and ASK_DoctorID = " + vo.getASK_DoctorID());		}		if(searchType ==1){//1为疾病 2为科室			JSONArray disJsons = JSONArray.fromObject(stones);			if(disJsons.size()>0){				condition2.append("  	AND d.ASK_DiseaseID IN (   " );				String str ="";				for(int i = 0 ; i <disJsons.size();i++){					str = str + disJsons.getJSONObject(i).get("seachID") + ",";												}				str = StringUtils.substringBeforeLast(str,",");				condition2.append(str + ")");			}		}else{			JSONArray depts = JSONArray.fromObject(stones);			condition2.append("   AND  ( " );			if(depts.size()>0){				String str ="";				for(int i = 0 ; i <depts.size();i++){					if(i == 0){						str = str +  "    CHARINDEX("								+ "'," + 	depts.getJSONObject(i).get("seachID")+ ",'"								+ ",QD_DeptTwoIDS)> 0  " ;					}else{						str = str +  "  OR  CHARINDEX("								+ "'," + 	depts.getJSONObject(i).get("seachID")+ ",'"								+ ",QD_DeptTwoIDS)> 0  " ;					}									}				condition2.append(str );			}			condition2.append( " ) ");		}				if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		if(proid >0 ){			orderby.append(" ( CASE WHEN provinceID =  " +  proid + " THEN 1 ELSE 2 END   )  ASC,     provinceID ASC ,");			sql.addVar("@order", orderby.toString());		}		sql.addVar("@d", condition2.toString());		sql.toString();		com.common.json.JSONObject rt;		System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();	}	@Override	public Integer saveCloseQue(String quesMainId, String doctorId, String queFlag)			throws Exception {				System.out.println("22222");				Sql sql = DB.me().createSql(DoctorDefaultAuthSqlNameEnum.insertCloseQue);		sql.addParamValue(quesMainId);		sql.addParamValue(doctorId);		sql.addParamValue(queFlag);						System.out.println(sql.getSqlString());		Integer back= DB.me().insert(MyDatabaseEnum.YiHuNet2008,sql);				return back;	}	@Override	public Integer queryCountBytodaypub(String start, String end, String docid)			throws Exception {		// TODO Auto-generated method stub				Sql sql = DB.me().createSql(DoctorDefaultAuthSqlNameEnum.queryCountBytodaypub);				StringBuffer such =new StringBuffer();				such.append("and 	CreateDate >  ? AND CreateDate < ?AND doctorId = ?  AND queFlag = 'P'");		sql.addParamValue(start);		sql.addParamValue(end);		sql.addParamValue(docid);				sql.addVar("@such", such.toString());				System.out.println(sql.getSqlString());													Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;							}	@Override	public Integer queryaddlovecount(String start, String end, String docid)			throws Exception {		Sql sql = DB.me().createSql(DoctorDefaultAuthSqlNameEnum.queryaddlovecount);						StringBuffer such =new StringBuffer();						such.append("and 	CreateDate >  ? AND CreateDate < ?AND doctorId = ? ");			sql.addParamValue(start);			sql.addParamValue(end);			sql.addParamValue(docid);						sql.addVar("@such", such.toString());						System.out.println(sql.getSqlString());																				Integer count = DB.me()					.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);			return count;	}	@Override	public Integer saveAddlove(String quesMainId, String doctorId)			throws Exception {		// TODO Auto-generated method stub				System.out.println("22222");				Sql sql = DB.me().createSql(DoctorDefaultAuthSqlNameEnum.saveAddlove);		sql.addParamValue(quesMainId);		sql.addParamValue(doctorId); 						System.out.println(sql.getSqlString());		Integer back= DB.me().insert(MyDatabaseEnum.YiHuNet2008,sql);				return back;	}	@Override	public Integer quesListForDoctorAnswerAndOverCountForUser(QuesMainVo vo)			throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerAndOverCountForUser);										StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null ){			if( vo.getASK_DoctorID() > 0){				condition.append(" and t1.ASK_DoctorID = " + vo.getASK_DoctorID());			}			if(vo.getASK_UserID()!=null){				condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());			}		}						if(StringUtil.isNotEmpty(vo.getDoctorUids())){			if(!vo.getDoctorUids().equals("0")){				condition.append(" and t1.ASK_DoctorID  in ( " + vo.getDoctorUids() +" ) ");			}		}		condition.append("   AND (QD_SourceType = 0 OR QD_SourceType = 1)  "  );					sql.addVar("@p", "");				sql.addVar("@c", condition.toString());				System.out.println(sql.getSqlString());						int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;								}	@Override	public String quesListForDoctorAnswerAndOverV2ForUser(QuesMainVo vo,			Integer pageSize, Integer pageIndex) throws Exception {				Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerAndOverV2ForUser);				StringBuilder condition = new StringBuilder();		if(vo.getASK_DoctorID() !=null ){			if( vo.getASK_DoctorID() > 0){				condition.append(" and t1.ASK_DoctorID = " + vo.getASK_DoctorID());			}			if(vo.getASK_UserID()!=null){				condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());			}		}						if(StringUtil.isNotEmpty(vo.getDoctorUids())){			if(!vo.getDoctorUids().equals("0")){				condition.append(" and t1.ASK_DoctorID  in ( " + vo.getDoctorUids() +" ) ");			}		}		condition.append("   AND (QD_SourceType = 0 OR QD_SourceType = 1)  "  );		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >="  +pageIndex					+ " and rowId <=" + (pageIndex+pageSize-1));		} else {			sql.addVar("@p", "");		}		sql.addVar("@c", condition.toString());						sql.toString();		com.common.json.JSONObject rt;		System.out.println("forlist++++"+sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();					}	@Override	public String userIdgetDoctorUid(Integer userId) throws Exception {				Sql sql = DB.me().createSql(QuesMainSqlNameEnum.userIdgetDoctorUid);				StringBuilder condition = new StringBuilder();						if(StringUtil.isNotEmpty(userId)){						condition.append(" and ASK_UserID= " +userId+"");					}		sql.addVar("@such", condition.toString());				System.out.println(sql.getSqlString());				com.common.json.JSONObject rt;		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();			}	@Override	public  List<CloseQueVo> queryCloseQueDoctorAndCount(String start, String end) throws Exception {		// TODO Auto-generated method stub		Sql sql = DB.me().createSql(DoctorDefaultAuthSqlNameEnum.queryCloseQueDoctorAndCount);						StringBuffer such =new StringBuffer();						such.append("and 	CreateDate >  ? AND CreateDate < ?");			sql.addParamValue(start);			sql.addParamValue(end);						sql.addVar("@such", such.toString());						System.out.println(sql.getSqlString());			 List<CloseQueVo> rt  = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql,CloseQueVo.class);			return rt;			}	@Override	public Integer quesListForDoctorAnswerAndOverCountV5(QuesMainVo vo)			throws Exception {								Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerAndOverCountV5);								StringBuilder condition = new StringBuilder();										if (StringUtil.isNotEmpty(vo.getQD_DeptTwoIDS())) {			condition.append("   AND  ( " );						String bigDepartment = DBCache.smallDepartmentBigDepartmentTranslation.get(vo.getQD_DeptTwoIDS());			System.err.println(bigDepartment);			Map<String, String> smallDepartmentList =DBCache.smallDepartmentListBySn.get(bigDepartment);						if(smallDepartmentList==null){				throw  new SmallDepartmentListNullException("标准科室 错误  NULL   ERROR");			}			int i =0 ;			Set<String> set = smallDepartmentList.keySet();			for (String key : set) {				if(i==0){					condition.append( "    CHARINDEX("							+ "'," + key+ ",'"							+ ",QD_DeptTwoIDS)> 0 " );				}else{					condition.append( "  OR   CHARINDEX("							+ "'," + key+ ",'"							+ ",QD_DeptTwoIDS)> 0 " );				}				i=i+1;				//array.add(obj);			}			condition.append( " ) ");		}						if(vo.getASK_DoctorID() !=null ){			if( vo.getASK_DoctorID() > 0){				condition.append(" and t1.ASK_DoctorID = " + vo.getASK_DoctorID());			}			if(vo.getASK_UserID()!=null){				condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());			}		}		if(StringUtil.isNotEmpty(vo.getDoctorUids())){			if(!vo.getDoctorUids().equals("0")){				condition.append(" and t1.ASK_DoctorID  in ( " + vo.getDoctorUids() +" ) ");			}		}		condition.append("   AND (QD_SourceType = 0 OR QD_SourceType = 1)  "  );			sql.addVar("@p", "");				sql.addVar("@c", condition.toString());		System.out.println(sql.toString());						int rt = DB.me().queryForInteger(				MyDatabaseEnum.YiHuNet2008, sql);		return rt;							}	@Override	public String quesListForDoctorAnswerAndOverV5(QuesMainVo vo,			Integer pageSize, Integer pageIndex) throws Exception {		Sql sql = DB.me().createSql(QuesMainSqlNameEnum.quesListForDoctorAnswerAndOverV5);				StringBuilder condition = new StringBuilder();				if (StringUtil.isNotEmpty(vo.getQD_DeptTwoIDS())) {			condition.append("   AND  ( " );						String bigDepartment = DBCache.smallDepartmentBigDepartmentTranslation.get(vo.getQD_DeptTwoIDS());			Map<String, String> smallDepartmentList =DBCache.smallDepartmentListBySn.get(bigDepartment);						int i =0 ;			Set<String> set = smallDepartmentList.keySet();			for (String key : set) {				if(i==0){					condition.append( "    CHARINDEX("							+ "'," + key+ ",'"							+ ",QD_DeptTwoIDS)> 0 " );				}else{					condition.append( "  OR   CHARINDEX("							+ "'," + key+ ",'"							+ ",QD_DeptTwoIDS)> 0 " );				}				i=i+1;				//array.add(obj);			}			condition.append( " ) ");		}										if(vo.getASK_DoctorID() !=null ){			if( vo.getASK_DoctorID() > 0){				condition.append(" and t1.ASK_DoctorID = " + vo.getASK_DoctorID());			}			if(vo.getASK_UserID()!=null){				condition.append(" and t1.ASK_UserID = " + vo.getASK_UserID());			}		}		if(StringUtil.isNotEmpty(vo.getDoctorUids())){			if(!vo.getDoctorUids().equals("0")){				condition.append(" and t1.ASK_DoctorID  in ( " + vo.getDoctorUids() +" ) ");			}		}		condition.append("   AND (QD_SourceType = 0 OR QD_SourceType = 1)  "  );		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@p", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@p", "");		}		sql.addVar("@c", condition.toString());		sql.toString();		com.common.json.JSONObject rt;		System.out.println(sql.toString());		rt = DB.me().queryForJson(				MyDatabaseEnum.YiHuNet2008, sql);		return rt.toString();							}	}