package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.DoctorFreeCountSqlNameEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.DoctorFreeCountEditVo;import com.yihu.myt.vo.DoctorFreeCountVo;import com.yihu.myt.service.service.IDoctorFreeCountService;public class DoctorFreeCountService implements IDoctorFreeCountService {	/**	 * 获取列表记录数	 */	public Integer queryDoctorFreeCountCountByCondition(DoctorFreeCountVo vo)			throws Exception {		Sql sql = DB				.me()				.createSql(						DoctorFreeCountSqlNameEnum.queryDoctorFreeCountCountByCondition);		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}	/**	 * 获取列表	 */	public List<DoctorFreeCountVo> queryDoctorFreeCountListByCondition(			DoctorFreeCountVo vo) throws Exception {		Sql sql = DB.me().createSql(				DoctorFreeCountSqlNameEnum.queryDoctorFreeCountListByCondition);		StringBuilder condition = new StringBuilder();		if (vo.getDfcId() != null) {			condition.append(" and DfcId = " + vo.getDfcId());		}		if (vo.getDoctorUid() != null) {			condition.append(" and DoctorUid = " + vo.getDoctorUid());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<DoctorFreeCountVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, DoctorFreeCountVo.class);		return list;	}	public List<DoctorFreeCountVo> queryDoctorFreeCountList(			String ids,Integer userid) throws Exception {		Sql sql = DB.me().createSql(				DoctorFreeCountSqlNameEnum.queryDoctorFreeCountList);		StringBuilder condition = new StringBuilder();		StringBuilder page = new StringBuilder();		if (userid != null) {			condition.append(" and u.userId = " + userid);		}		//sql.addParamValue(ids);		if (StringUtil.isNotEmpty(ids)) {			page.append("( " + ids + ")");		}		/*if (doctorUid != null) {			condition.append(" and DoctorUid = " + doctorUid);		}*/		sql.addVar("@condition", condition.toString());		sql.addVar("@page", page.toString());		List<DoctorFreeCountVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, DoctorFreeCountVo.class);		return list;	}		/**	 * 获取列表	 *//*	public List<DoctorFreeCountVo> queryDoctorFreeCountList(			String ids) throws Exception {		Sql sql = DB.me().createSql(				DoctorFreeCountSqlNameEnum.queryDoctorFreeCountListByCondition);		StringBuilder condition = new StringBuilder();		if (StringUtil.isNotEmpty(ids)) {			condition.append(" and DoctorUid in ( " + ids + ")");		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<DoctorFreeCountVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, DoctorFreeCountVo.class);		return list;	}*/	public DoctorFreeCountVo queryDoctorFreeCount(DoctorFreeCountVo vo)			throws Exception {		List<DoctorFreeCountVo> list = this				.queryDoctorFreeCountListByCondition(vo);		if (list == null || list.size() == 0) {			return null;		} else {			return list.get(0);		}	}	/**	 * 添加	 */	public int insertDoctorFreeCount(DoctorFreeCountVo vo) throws Exception {		try {			int r = DB.me().insert(					MyDatabaseEnum.YiHuNet2008,					DB.me().createInsertSql(vo,							MyTableNameEnum.ZiXun_DoctorFreeCount, "dbo"));			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	public int updateDoctorFreeCountForUpFreeCount(DoctorFreeCountVo vo)			throws Exception {		try {			StringBuilder condition = new StringBuilder();			if (vo.getDfcId() != null) {				condition.append("  DfcId = " + vo.getDfcId());				vo.setDfcId(null);				int r = DB.me().update(						MyDatabaseEnum.YiHuNet2008,						DB.me().createUpdateSql(vo,								MyTableNameEnum.ZiXun_DoctorFreeCount,								condition.toString()));				return r;			} else {				return -1;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	/**	 * 修改	 */	public void updateDoctorFreeCountByCondition(DoctorFreeCountVo vo,			JdbcConnection conn) throws Exception {		Sql sql = DB.me().createSql(				DoctorFreeCountSqlNameEnum.updateDoctorFreeCountByCondition);		if (vo == null || StringUtil.isEmpty(vo.getDfcId())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {			throw new Exception("未有更新SQL被执行！");		} else {			condition.deleteCharAt(condition.length() - 1);			sql.addVar("@condition", condition.toString());			sql.addParamValue(vo.getDfcId());		}		DB.me().update(conn, sql);	}	public void  upDocFreeCountToInitialization(DoctorFreeCountVo vo) throws Exception {		Sql sql = DB.me().createSql(				DoctorFreeCountSqlNameEnum.updateDoctorFreeCountInitialization);		DB.me().update(MyDatabaseEnum.YiHuNet2008,sql);	}	}