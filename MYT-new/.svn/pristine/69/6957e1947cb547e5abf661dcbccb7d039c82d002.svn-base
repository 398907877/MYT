package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.enums.OpenAuthSqlNameEnum;import com.yihu.myt.service.service.IOpenAuthService;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.OpenAuthVo;import com.yihu.myt.vo.QuesMainVo;
public class OpenAuthService implements IOpenAuthService{
	/**	*获取列表记录数	*/	public Integer queryOpenAuthCountByCondition(OpenAuthVo vo) throws Exception{		Sql sql = DB.me().createSql(OpenAuthSqlNameEnum.queryOpenAuthCountByCondition);		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		Integer count = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}
	/**	*获取列表	*/	public List<OpenAuthVo> queryOpenAuthListByCondition(OpenAuthVo vo) throws Exception{		Sql sql = DB.me().createSql(OpenAuthSqlNameEnum.queryOpenAuthListByCondition);		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<OpenAuthVo> list = DB.me().queryForBeanList(MyDatabaseEnum.YiHuNet2008, sql,OpenAuthVo.class);		return list;	}
	/**	*添加	*/	public void insertOpenAuth(OpenAuthVo vo) throws Exception{		Sql sql = DB.me().createSql(OpenAuthSqlNameEnum.insertOpenAuth);		sql.addParamValue(vo.getQuesMainId());		sql.addParamValue(vo.getDoctorId());		sql.addParamValue(vo.getOpenAuthFlag());		DB.me().insert(MyDatabaseEnum.YiHuNet2008,sql);		}
	/**	*修改	*/	public void updateOpenAuthByCondition(OpenAuthVo vo,JdbcConnection conn) throws Exception{		Sql sql = DB.me().createSql(OpenAuthSqlNameEnum.updateOpenAuthByCondition);		if (vo == null  || StringUtil.isEmpty(vo.getID())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {		throw new Exception("未有更新SQL被执行！");		} else {		condition.deleteCharAt(condition.length() - 1);		sql.addVar("@condition", condition.toString());		sql.addParamValue(vo.getID());		}		DB.me().update(conn, sql);		}				/**	 * 根据id  更改 openauthflag   	 */	public int updateOpenAuthFlagByID(OpenAuthVo vo) throws Exception {		try {			Sql sql = DB.me().createSql(OpenAuthSqlNameEnum.updateOpenAuthByCondition);						StringBuilder condition = new StringBuilder();			if (Long.valueOf(vo.getQuesMainId()) > 0) {								condition.append("OpenAuthFlag= '"+vo.getOpenAuthFlag()+"'");								sql.addVar("@condition", condition.toString());				sql.addParamValue(vo.getQuesMainId());				System.out.println(sql.toString());				int r = DB.me().update(MyDatabaseEnum.YiHuNet2008, sql);				return r;			} else {				return -1;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	@Override	public int updateOpenAuthFlagByDocid(OpenAuthVo vo) throws Exception {		try {			Sql sql = DB.me().createSql(OpenAuthSqlNameEnum.updateOpenAuthFlagByDocid);						StringBuilder condition = new StringBuilder();			if (Long.valueOf(vo.getDoctorId()) > 0) {								condition.append("OpenAuthFlag= '"+vo.getOpenAuthFlag()+"'");								sql.addVar("@condition", condition.toString());												sql.addParamValue(vo.getDoctorId());				System.out.println(sql.toString()+"用户关闭情况下    批量操作+++++++++++++++");				int r = DB.me().update(MyDatabaseEnum.YiHuNet2008, sql);				return r;			} else {				return -1;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}		/**	 * 更具  queid  更改 docid  + openflag	 */	@Override	public int updateDocidandopenflagByqueID(OpenAuthVo vo) throws Exception {								try {			Sql sql = DB.me().createSql(OpenAuthSqlNameEnum.updateOpenAuthByCondition);						StringBuilder condition = new StringBuilder();			if (Long.valueOf(vo.getQuesMainId()) > 0) {								condition.append("OpenAuthFlag= '"+vo.getOpenAuthFlag()+"'"+",");				condition.append("DoctorId= '"+vo.getDoctorId()+"'");								sql.addVar("@condition", condition.toString());				sql.addParamValue(vo.getQuesMainId());				System.out.println(sql.toString());				int r = DB.me().update(MyDatabaseEnum.YiHuNet2008, sql);				return r;			} else {				return -1;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}								
}