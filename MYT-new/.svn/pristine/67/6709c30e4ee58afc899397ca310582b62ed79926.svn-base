package com.yihu.myt.service.service.impl;import java.util.List;import com.common.json.JSONObject;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.dao.BookEnrolDAO;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.BookEnrolSqlNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.BookEnrolVo;import com.yihu.myt.service.service.IBookEnrolService;
public class BookEnrolService implements IBookEnrolService{
BookEnrolDAO bookEnrolDAO = new BookEnrolDAO();
	/**	*获取列表记录数	*/	public Integer queryBookEnrolCountByCondition(BookEnrolVo vo) throws Exception{		Sql sql = DB.me().createSql(BookEnrolSqlNameEnum.queryBookEnrolCountByCondition);		StringBuilder condition = new StringBuilder();		if(StringUtil.isNotEmpty(vo.getSTATE())){			condition.append(" and STATE= ? ");			sql.addParamValue(vo.getSTATE());		}		if(StringUtil.isNotEmpty(vo.getOPERCONFID())){			condition.append(" and OPERCONFID= ? ");			sql.addParamValue(vo.getOPERCONFID());		}		if(StringUtil.isNotEmpty(vo.getREVERTRESULT())){			if(vo.getREVERTRESULT().equals("1")  || vo.getREVERTRESULT().equals("2")){				condition.append(" and (REVERTRESULT = 1 or  REVERTRESULT = 2)");			}		}		if(vo.getBOOKENROLID()!=null){			condition.append(" and BOOKENROLID= ? ");			sql.addParamValue(vo.getBOOKENROLID());		}		if(StringUtil.isNotEmpty(vo.getDATEWEEK())){			if(vo.getDATEWEEK().equals("1")){				condition.append(" and DATEWEEK > getdate()-1 ");			}		}		sql.addVar("@condition", condition.toString());		Integer count = DB.me().queryForInteger(MyDatabaseEnum.boss, sql);		return count;	}	/**	*获取单个对象	*/	public BookEnrolVo queryBookEnrol(BookEnrolVo vo) throws Exception{		 List<BookEnrolVo> list = this.queryBookEnrolListByCondition(vo);		 if (list == null || list.size() == 0) {				return null;			} else {				return list.get(0);			}	}		
	/**	*获取列表	*/	public List<BookEnrolVo> queryBookEnrolListByCondition(BookEnrolVo vo) throws Exception{		Sql sql = DB.me().createSql(BookEnrolSqlNameEnum.queryBookEnrolListByCondition);		StringBuilder condition = new StringBuilder();		if(StringUtil.isNotEmpty(vo.getSTATE())){			condition.append(" and STATE= ? ");			sql.addParamValue(vo.getSTATE());		}		if(StringUtil.isNotEmpty(vo.getOPERCONFID())){			condition.append(" and OPERCONFID= ? ");			sql.addParamValue(vo.getOPERCONFID());		}		if(StringUtil.isNotEmpty(vo.getREVERTRESULT())){			if(vo.getREVERTRESULT().equals("1")  || vo.getREVERTRESULT().equals("2")){				condition.append(" and (REVERTRESULT = 1 or  REVERTRESULT = 2)");			}		}				if(vo.getBOOKENROLID()!=null){			condition.append(" and BOOKENROLID= ? ");			sql.addParamValue(vo.getBOOKENROLID());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		System.out.println(sql.toString());		List<BookEnrolVo> list = DB.me().queryForBeanList(MyDatabaseEnum.boss, sql,BookEnrolVo.class);		return list;	}	/**	*获取列表	*/	public  JSONObject getBookEnrolListForSendMsg() throws Exception{		Sql sql = DB.me().createSql(BookEnrolSqlNameEnum.getBookEnrolListForSendMsg);		JSONObject list  = DB.me().queryForJson(MyDatabaseEnum.boss, sql);		return list;	}	/**	*获取列表	*/	public String queryBookEnrolListByCondition(BookEnrolVo vo,int pageSize,int pageIndex) throws Exception{		Sql sql = DB.me().createSql(BookEnrolSqlNameEnum.queryBookEnrolListByCondition);		StringBuilder condition = new StringBuilder();		if(StringUtil.isNotEmpty(vo.getSTATE())){			condition.append(" and STATE= ? ");			sql.addParamValue(vo.getSTATE());		}		if(StringUtil.isNotEmpty(vo.getOPERCONFID())){			condition.append(" and OPERCONFID= ? ");			sql.addParamValue(vo.getOPERCONFID());		}		if(StringUtil.isNotEmpty(vo.getREVERTRESULT())){			if(vo.getREVERTRESULT().equals("1")  || vo.getREVERTRESULT().equals("2")){				condition.append(" and (REVERTRESULT = 1 or  REVERTRESULT = 2)");			}		}		if(StringUtil.isNotEmpty(vo.getDATEWEEK())){			if(vo.getDATEWEEK().equals("1")){				condition.append(" and DATEWEEK > getdate()-1 ");			}		}		sql.addVar("@condition", condition.toString());		if (pageSize != 0 || pageIndex != 0) {			sql.addVar("@page", " and rowId >" + pageSize * pageIndex					+ " and rowId <=" + (pageIndex + 1) * pageSize);		} else {			sql.addVar("@page", "");		}		System.out.println(sql.toString());		JSONObject list = DB.me().queryForJson(MyDatabaseEnum.boss, sql);		return list.toString();	}
	/**	*添加	*/	public void insertBookEnrol(BookEnrolVo vo) throws Exception{		JdbcConnection conn = DB.me().getConnection(MyDatabaseEnum.boss);		try {		conn.beginTransaction();		bookEnrolDAO.insertBookEnrol(vo,conn);		conn.commitTransaction(true);		} catch (Exception e) {		conn.rollbackAndclose();		throw e;}}	/**	*添加	*/	public int insertBookEnrolRt(BookEnrolVo vo) throws Exception{		JdbcConnection conn = DB.me().getConnection(MyDatabaseEnum.boss);		try {		conn.beginTransaction();		int rt = bookEnrolDAO.insertBookEnrolRt(vo,conn);		conn.commitTransaction(true);		return rt;		} catch (Exception e) {		conn.rollbackAndclose();		throw e;}}			/**	*添加	*/	public void updateBookEnrol(BookEnrolVo vo) throws Exception{		JdbcConnection conn = DB.me().getConnection(MyDatabaseEnum.boss);		try {		conn.beginTransaction();		bookEnrolDAO.updateBookEnrolByCondition(vo,conn);		conn.commitTransaction(true);		} catch (Exception e) {		conn.rollbackAndclose();		throw e;}}			public int updateBE(BookEnrolVo vo) throws Exception {		JdbcConnection conn = DB.me().getConnection(MyDatabaseEnum.boss);		try {			conn.beginTransaction();			int rt = bookEnrolDAO.upBookEnrolByCondition(vo, conn);			conn.commitTransaction(true);			return rt ;		} catch (Exception e) {			conn.rollbackAndclose();			throw e;		}	}		}