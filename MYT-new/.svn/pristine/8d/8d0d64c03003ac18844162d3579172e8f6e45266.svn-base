package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.enums.QuesMainSqlNameEnum;import com.yihu.myt.enums.QuesReplyMutualSqlNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.QuesReplyMutualVo;import com.yihu.myt.service.service.IQuesReplyMutualService;
public class QuesReplyMutualService implements IQuesReplyMutualService{
	/**	*获取列表记录数	*/	public Integer queryQuesReplyMutualCountByCondition(QuesReplyMutualVo vo) throws Exception{		Sql sql = DB.me().createSql(QuesReplyMutualSqlNameEnum.queryQuesReplyMutualCountByCondition);		StringBuilder condition = new StringBuilder();		if(vo.getQueID()!=null){			condition.append(" and QueID="+vo.getQueID());		}		sql.addVar("@condition", condition.toString());		Integer count = DB.me().queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}
	/**	*获取列表	*/	public List<QuesReplyMutualVo> queryQuesReplyMutualListByCondition(QuesReplyMutualVo vo) throws Exception{		Sql sql = DB.me().createSql(QuesReplyMutualSqlNameEnum.queryQuesReplyMutualListByCondition);		StringBuilder condition = new StringBuilder();		if(vo.getQueID()!=null){			condition.append(" and QueID="+vo.getQueID());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<QuesReplyMutualVo> list = DB.me().queryForBeanList(MyDatabaseEnum.YiHuNet2008, sql,QuesReplyMutualVo.class);		return list;	}	public QuesReplyMutualVo queryQuesReplyMutual(QuesReplyMutualVo vo) throws Exception{		List<QuesReplyMutualVo> list = this.queryQuesReplyMutualListByCondition(vo);		if (list == null || list.size() == 0) {			return null;		} else {			return list.get(0);		}	}
	/**	*添加	*/	public int insertQuesReplyMutual(QuesReplyMutualVo vo) throws Exception{		try {			int r = DB.me().insert(					MyDatabaseEnum.YiHuNet2008,					DB.me().createInsertSql(vo, MyTableNameEnum.ZiXun_QuesReplyMutual,							"dbo"));			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	public int updateQuesReplyMutual(QuesReplyMutualVo vo, JdbcConnection conn)			throws Exception {		try {			Sql sql = DB.me().createSql(					QuesReplyMutualSqlNameEnum.updateQuesReplyMutualByCondition);			StringBuilder condition = new StringBuilder();			if (vo == null || StringUtil.isEmpty(vo.getQuesReplyMutualID())) {				return -1;			}			if(vo.getReplyCount()!=null){				condition.append(",ReplyCount = " + vo.getReplyCount());			}			if(vo.getReplyType()!=null){				condition.append(" ,ReplyType = " + vo.getReplyType());			}			String left = condition.substring(0, 1);			if(left.equals(",")){				condition.delete(0, 1);			}			if (condition.length() == 0) {				return -1;			} else {				sql.addVar("@condition", condition.toString());				sql.addParamValue(vo.getQuesReplyMutualID());			}			DB.me().update(conn, sql);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}		return 0;	}		public int updateQuesReplyMutual(QuesReplyMutualVo vo)			throws Exception {		try {			Sql sql = DB.me().createSql(					QuesReplyMutualSqlNameEnum.updateQuesReplyMutualByCondition);			StringBuilder condition = new StringBuilder();			if (vo == null || StringUtil.isEmpty(vo.getQuesReplyMutualID())) {				return -1;			}			if(vo.getReplyCount()!=null){				condition.append(",ReplyCount = " + vo.getReplyCount());			}			if(vo.getReplyType()!=null){				condition.append(" ,ReplyType = " + vo.getReplyType());			}			String left = condition.substring(0, 1);			if(left.equals(",")){				condition.delete(0, 1);			}			if (condition.length() == 0) {				return -1;			} else {				sql.addVar("@condition", condition.toString());				sql.addParamValue(vo.getQuesReplyMutualID());			}			DB.me().update(MyDatabaseEnum.YiHuNet2008, sql);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}		return 0;	}	
	/**	*修改	*/	public void updateQuesReplyMutualByCondition(QuesReplyMutualVo vo,JdbcConnection conn) throws Exception{Sql sql = DB.me().createSql(QuesReplyMutualSqlNameEnum.updateQuesReplyMutualByCondition);		if (vo == null  || StringUtil.isEmpty(vo.getQuesReplyMutualID())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {		throw new Exception("未有更新SQL被执行！");		} else {		condition.deleteCharAt(condition.length() - 1);		sql.addVar("@condition", condition.toString());		sql.addParamValue(vo.getQuesReplyMutualID());		}		DB.me().update(conn, sql);		}
}