package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.DepartmentsSqlNameEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.DepartmentsVo;import com.yihu.myt.service.service.IDepartmentsService;public class DepartmentsService implements IDepartmentsService {	/**	 * 获取列表记录数	 */	public Integer queryDepartmentsCountByCondition(DepartmentsVo vo)			throws Exception {		Sql sql = DB.me().createSql(				DepartmentsSqlNameEnum.queryDepartmentsCountByCondition);		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}	/**	 * 获取列表	 */	public List<DepartmentsVo> queryDepartmentsListByCondition(DepartmentsVo vo)			throws Exception {		Sql sql = DB.me().createSql(				DepartmentsSqlNameEnum.queryDepartmentsListByCondition);		StringBuilder condition = new StringBuilder();		if(vo.getASK_QuesID()!=null){			condition.append(" and ASK_QuesID = " + vo.getASK_QuesID());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<DepartmentsVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, DepartmentsVo.class);		return list;	}	/**	 * 添加	 */	public int insertDepartments(DepartmentsVo vo) throws Exception {		try {			int r = DB.me().insert(					MyDatabaseEnum.YiHuNet2008,					DB.me().createInsertSql(vo,							MyTableNameEnum.ZiXun_Departments, "dbo"));			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	/**	 * 修改	 */	public void updateDepartmentsByCondition(DepartmentsVo vo,			JdbcConnection conn) throws Exception {		Sql sql = DB.me().createSql(				DepartmentsSqlNameEnum.updateDepartmentsByCondition);		if (vo == null || StringUtil.isEmpty(vo.getDEPART_ID())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {			throw new Exception("未有更新SQL被执行！");		} else {			condition.deleteCharAt(condition.length() - 1);			sql.addVar("@condition", condition.toString());			sql.addParamValue(vo.getDEPART_ID());		}		DB.me().update(conn, sql);	}	public int updateDepartmentsForQuesID(DepartmentsVo vo, String ids)			throws Exception {		try {			StringBuilder condition = new StringBuilder();			if(vo.getASK_QuesID() >0 && StringUtil.isNotEmpty(ids)){				condition.append("    DEPART_ID  in ( " + ids +" )");				int r = DB.me().update(						MyDatabaseEnum.YiHuNet2008,						DB.me().createUpdateSql(vo,								MyTableNameEnum.ZiXun_Departments, condition.toString()));				return r;			}else{				return -1;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}		public int updateDepartmentsForQuesID(DepartmentsVo vo )			throws Exception {		try {			StringBuilder condition = new StringBuilder();			if(vo.getASK_QuesID() >0 ){				condition.append("    ASK_QuesID  = "  + vo.getASK_QuesID());				int r = DB.me().update(						MyDatabaseEnum.YiHuNet2008,						DB.me().createUpdateSql(vo,								MyTableNameEnum.ZiXun_Departments, condition.toString()));				return r;			}else{				return -1;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}}