package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.enums.UserFreeCountSqlNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.UserFreeCountVo;import com.yihu.myt.service.service.IUserFreeCountService;public class UserFreeCountService implements IUserFreeCountService {	/**	 * 获取列表记录数	 */	public Integer queryUserFreeCountCountByCondition(UserFreeCountVo vo)			throws Exception {		Sql sql = DB.me().createSql(				UserFreeCountSqlNameEnum.queryUserFreeCountCountByCondition);		StringBuilder condition = new StringBuilder();		if(vo.getIfOver()!=null){			condition.append(" and IfOver =" +vo.getIfOver())	;		}		sql.addVar("@condition", condition.toString());		//System.out.println(sql.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}	/**	 * 获取列表记录数	 */	public Integer userGetFreeCount(Integer doctorUid,Integer userID,Integer ifOver)			throws Exception {		Sql sql = DB.me().createSql(				UserFreeCountSqlNameEnum.queryUserGetFreeCount);		StringBuilder condition = new StringBuilder();		if(doctorUid!=null && userID!=null){			condition.append("  and UserId =" + userID);			condition.append(" and doctorUid =" + doctorUid);			condition.append(" and ifOver = " + ifOver);		}		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}		public UserFreeCountVo userGetFree(Integer doctorUid,Integer userID)			throws Exception {		Sql sql = DB.me().createSql(				UserFreeCountSqlNameEnum.queryUserGetFree);		StringBuilder condition = new StringBuilder();		if(doctorUid!=null && userID!=null){			condition.append("  and UserId =" + userID);			condition.append(" and doctorUid =" + doctorUid);					}		sql.addVar("@condition", condition.toString());		UserFreeCountVo vo = DB.me().queryForBean(						MyDatabaseEnum.YiHuNet2008, sql, UserFreeCountVo.class);		return vo;	}	/**	 * 获取列表	 */	public List<UserFreeCountVo> queryUserFreeCountListByCondition(			UserFreeCountVo vo) throws Exception {		Sql sql = DB.me().createSql(				UserFreeCountSqlNameEnum.queryUserFreeCountListByCondition);		StringBuilder condition = new StringBuilder();		if(vo.getDfcId()!=null){			condition.append(" and DfcId=" + vo.getDfcId());		}		if(vo.getUfcId()!=null){			condition.append(" and UfcId=" + vo.getUfcId());		}		if(vo.getUserId()!=null){			condition.append(" and UserId=" + vo.getUserId());		}		if(vo.getIfOver()!=null){			condition.append(" and IfOver=" + vo.getIfOver());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		//System.out.print(sql.toString());		List<UserFreeCountVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, UserFreeCountVo.class);		return list;	}	public UserFreeCountVo queryUserFreeCount(UserFreeCountVo vo)throws Exception {		List<UserFreeCountVo> list = this.queryUserFreeCountListByCondition(vo);		if (list == null || list.size() == 0) {			return null;		} else {			return list.get(0);		}	}			public UserFreeCountVo queryUserFree(UserFreeCountVo vo)throws Exception{		List<UserFreeCountVo> list = this.queryUserFreeListByCondition(vo);		if (list == null || list.size() == 0) {			return null;		} else {			return list.get(0);		}	}		public List<UserFreeCountVo> queryUserFreeListByCondition(			UserFreeCountVo vo) throws Exception {		Sql sql = DB.me().createSql(				UserFreeCountSqlNameEnum.queryUserFreeListByCondition);		StringBuilder condition = new StringBuilder();		if(vo.getDfcId()!=null){			condition.append(" and DfcId=" + vo.getDfcId());		}		if(vo.getUfcId()!=null){			condition.append(" and UfcId=" + vo.getUfcId());		}		if(vo.getUserId()!=null){			condition.append(" and UserId=" + vo.getUserId());		}		if(vo.getIfOver()!=null){			condition.append(" and IfOver=" + vo.getIfOver());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		//System.out.print(sql.toString());		List<UserFreeCountVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, UserFreeCountVo.class);		return list;	}	/**	 * 获取列表	 */	public List<UserFreeCountVo> queryUserFreeOverList(			UserFreeCountVo vo) throws Exception {		Sql sql = DB.me().createSql(				UserFreeCountSqlNameEnum.queryUserFreeOverList);		System.out.println(sql.toString());		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<UserFreeCountVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, UserFreeCountVo.class);		return list;	}	/**	 * 添加	 */	public int insertUserFreeCount(UserFreeCountVo vo) throws Exception {		try {			int r = DB.me().insert(					MyDatabaseEnum.YiHuNet2008,					DB.me().createInsertSql(vo,							MyTableNameEnum.ZiXun_UserFreeCount, "dbo"));			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	/**	 * 修改	 */	public void updateUserFreeCountByCondition(UserFreeCountVo vo,			JdbcConnection conn) throws Exception {		Sql sql = DB.me().createSql(				UserFreeCountSqlNameEnum.updateUserFreeCountByCondition);		if (vo == null || StringUtil.isEmpty(vo.getDfcId())				|| StringUtil.isEmpty(vo.getUfcId())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {			throw new Exception("未有更新SQL被执行！");		} else {			condition.deleteCharAt(condition.length() - 1);			sql.addVar("@condition", condition.toString());			sql.addParamValue(vo.getDfcId());			sql.addParamValue(vo.getUfcId());		}		DB.me().update(conn, sql);	}	public int updateUserFree(UserFreeCountVo vo) throws Exception {		try {			StringBuilder condition = new StringBuilder();			if(vo.getUfcId()>0){				condition.append("  UfcId = "+ vo.getUfcId());				vo.setUfcId(null);				int r = DB.me().update(						MyDatabaseEnum.YiHuNet2008,						DB.me().createUpdateSql(vo, MyTableNameEnum.ZiXun_UserFreeCount,condition.toString()));				return r;			}else{				return -1;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	}