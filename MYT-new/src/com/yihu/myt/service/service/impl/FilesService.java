package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.FilesSqlNameEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.FilesVo;import com.yihu.myt.service.service.IFilesService;public class FilesService implements IFilesService {	/**	 * 获取列表记录数	 */	public Integer queryFilesCountByCondition(FilesVo vo) throws Exception {		Sql sql = DB.me()				.createSql(FilesSqlNameEnum.queryFilesCountByCondition);		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}	/**	 * 获取列表	 */	public List<FilesVo> queryFilesListByCondition(FilesVo vo) throws Exception {		Sql sql = DB.me().createSql(FilesSqlNameEnum.queryFilesListByCondition);		StringBuilder condition = new StringBuilder();		if(vo.getFILES_ObjID()!=null){			condition.append("  and FILES_ObjID = " + vo.getFILES_ObjID());		}		if(vo.getFILES_ObjTypeID()!=null){			condition.append("  and FILES_ObjTypeID = " + vo.getFILES_ObjTypeID());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<FilesVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, FilesVo.class);		return list;	}	public FilesVo queryFiles(FilesVo vo) throws Exception{		List<FilesVo> list = this.queryFilesListByCondition(vo);		if (list == null || list.size() == 0) {			return null;		} else {			return list.get(0);		}	}	/**	 * 添加	 */	public int insertFiles(FilesVo vo) throws Exception {		try {			int r = DB.me().insert(					MyDatabaseEnum.YiHuNet2008,					DB.me().createInsertSql(vo, MyTableNameEnum.ZiXun_Files,							"dbo"));			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	/**	 * 添加	 */	public int insertFilesbyConn(FilesVo vo,JdbcConnection conn) throws Exception {		try {			int r = DB.me().insert(					conn,					DB.me().createInsertSql(vo, MyTableNameEnum.ZiXun_Files,							"dbo"));			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	/**	 * 修改	 */	public void updateFilesByCondition(FilesVo vo, JdbcConnection conn)			throws Exception {		Sql sql = DB.me().createSql(FilesSqlNameEnum.updateFilesByCondition);		if (vo == null || StringUtil.isEmpty(vo.getFILES_ID())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {			throw new Exception("未有更新SQL被执行！");		} else {			condition.deleteCharAt(condition.length() - 1);			sql.addVar("@condition", condition.toString());			sql.addParamValue(vo.getFILES_ID());		}		DB.me().update(conn, sql);	}	public int updateFilesByCondition(FilesVo vo) throws Exception {		try {			StringBuilder condition = new StringBuilder();			if(vo.getFILES_ObjID() >0&& vo.getFILES_ObjTypeID()!=null && vo.getFILES_Status()!=null){				condition.append("    FILES_ObjID = " + vo.getFILES_ObjID()   );				condition.append("  and FILES_ObjTypeID = " + vo.getFILES_ObjTypeID()   );			int r = DB.me().update(					MyDatabaseEnum.YiHuNet2008,					DB.me().createUpdateSql(vo, MyTableNameEnum.ZiXun_Files,							condition.toString()));			return r;			}else{				return -1;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}			}	public int updateFilesForQuesID(FilesVo vo,String ids) throws Exception {		try {			StringBuilder condition = new StringBuilder();			if(vo.getFILES_ObjID() >0&& StringUtil.isNotEmpty(ids)){				condition.append("    FILES_ID in ( " + ids +" )");			int r = DB.me().update(					MyDatabaseEnum.YiHuNet2008,					DB.me().createUpdateSql(vo, MyTableNameEnum.ZiXun_Files,							condition.toString()));			return r;			}else{				return -1;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}}