package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.MySqlNameEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.enums.OperconfigSqlNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.OperconfigVo;import com.yihu.myt.service.service.IOperconfigService;public class OperconfigService implements IOperconfigService {	/**	 * 获取列表记录数	 */	public Integer queryOperconfigCountByCondition(OperconfigVo vo)			throws Exception {		Sql sql = DB.me().createSql(				OperconfigSqlNameEnum.queryOperconfigCountByCondition);		StringBuilder condition = new StringBuilder();		if (vo.getOPERCONFID() != 0) {			condition.append(" and OPERCONFID =" + vo.getOPERCONFID());		}		sql.addVar("@condition", condition.toString());		Integer count = DB.me().queryForInteger(MyDatabaseEnum.boss, sql);		return count;	}	/**	 * 获取列表	 */	public List<OperconfigVo> queryOperconfigListByCondition(OperconfigVo vo)			throws Exception {		Sql sql = DB.me().createSql(				OperconfigSqlNameEnum.queryOperconfigListByCondition);		StringBuilder condition = new StringBuilder();		if (vo.getOPERCONFID() != 0) {			condition.append(" and OPERCONFID =" + vo.getOPERCONFID());		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<OperconfigVo> list = DB.me().queryForBeanList(MyDatabaseEnum.boss,				sql, OperconfigVo.class);		return list;	}	/**	 * 添加	 */	public int insertOperconfig(OperconfigVo vo) throws Exception {		try {			int r = DB.me().insert(					MyDatabaseEnum.boss,					DB.me().createInsertSql(vo, MyTableNameEnum.MYT_OPERCONFIG,							"BOSS"));			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	/**	 * 修改	 */	public void updateOperconfigByCondition(OperconfigVo vo, JdbcConnection conn)			throws Exception {		Sql sql = DB.me().createSql(				OperconfigSqlNameEnum.updateOperconfigByCondition);		if (vo == null || StringUtil.isEmpty(vo.getOPERCONFID())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {			throw new Exception("未有更新SQL被执行！");		} else {			condition.deleteCharAt(condition.length() - 1);			sql.addVar("@condition", condition.toString());			sql.addParamValue(vo.getOPERCONFID());		}		DB.me().update(conn, sql);	}	/**	 * 通过对象查询问题。	 * 	 * @param vo	 * @return	 * @throws Exception	 */	public OperconfigVo queryOperconfid(OperconfigVo vo) throws Exception {		List<OperconfigVo> list = this.queryOperconfidList(vo);		if (list == null || list.size() == 0) {			return null;		} else {			return list.get(0);		}	}	/**	 * 获取列表	 */	public List<OperconfigVo> queryOperconfidList(OperconfigVo vo)			throws Exception {		Sql sql = DB.me().createSql(MySqlNameEnum.getMytOperconfig);		StringBuilder condition = new StringBuilder();		if (vo.getOPERCONFID() != 0) {			condition.append(" and OPERCONFID =" + vo.getOPERCONFID());		}		sql.addVar("@p", condition.toString());		List<OperconfigVo> list = DB.me().queryForBeanList(MyDatabaseEnum.boss,				sql, OperconfigVo.class);		return list;	}	public int updatequeryOperconfid (OperconfigVo vo){		try {			StringBuilder condition = new StringBuilder();			if(vo.getOPERCONFID()>0){				condition.append("  OPERCONFID = "+ vo.getOPERCONFID());				vo.setOPERCONFID(null);				int r = DB.me().update(						MyDatabaseEnum.boss,						DB.me().createUpdateSql(vo, MyTableNameEnum.MYT_OPERCONFIG,condition.toString()));				return r;			}else{				return -1;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}		}