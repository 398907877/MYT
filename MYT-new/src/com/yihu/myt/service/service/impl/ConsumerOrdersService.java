package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.ConsumerOrdersSqlNameEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.ConsumerOrdersVo;import com.yihu.myt.service.service.IConsumerOrdersService;public class ConsumerOrdersService implements IConsumerOrdersService {	/**	 * 获取列表记录数	 */	public Integer queryConsumerOrdersCountByCondition(ConsumerOrdersVo vo)			throws Exception {		Sql sql = DB.me().createSql(				ConsumerOrdersSqlNameEnum.queryConsumerOrdersCountByCondition);		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}	/**	 * 获取列表	 */	public List<ConsumerOrdersVo> queryConsumerOrdersListByCondition(			ConsumerOrdersVo vo) throws Exception {		Sql sql = DB.me().createSql(				ConsumerOrdersSqlNameEnum.queryConsumerOrdersListByCondition);		StringBuilder condition = new StringBuilder();		if (StringUtil.isNotEmpty(vo.getCO_IDs())) {			condition.append(" and CO_ID in (" + vo.getCO_IDs() + ") ");		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<ConsumerOrdersVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, ConsumerOrdersVo.class);		return list;	}			public ConsumerOrdersVo queryConsumerOrdersByQuesID(			ConsumerOrdersVo vo) throws Exception {		Sql sql = DB.me().createSql(				ConsumerOrdersSqlNameEnum.queryConsumerOrdersListByCondition);		StringBuilder condition = new StringBuilder();		if (StringUtil.isNotEmpty(vo.getASK_QuesID())) {			condition.append(" and ASK_QuesID = " + vo.getASK_QuesID() + " ");		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		vo = DB.me().queryForBean(				MyDatabaseEnum.YiHuNet2008, sql, ConsumerOrdersVo.class);		return vo;	}	/**	 * 添加	 */	public int insertConsumerOrders(ConsumerOrdersVo vo) throws Exception {		try {			int r = DB.me().insert(					MyDatabaseEnum.YiHuNet2008,					DB.me()							.createInsertSql(vo,									MyTableNameEnum.ZiXun_ConsumerOrders,									"dbo"));			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	/**	 * 修改	 */	public void updateConsumerOrdersByCondition(ConsumerOrdersVo vo,			JdbcConnection conn) throws Exception {		Sql sql = DB.me().createSql(				ConsumerOrdersSqlNameEnum.updateConsumerOrdersByCondition);		if (vo == null || StringUtil.isEmpty(vo.getCO_ID())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {			throw new Exception("未有更新SQL被执行！");		} else {			condition.deleteCharAt(condition.length() - 1);			sql.addVar("@condition", condition.toString());			sql.addParamValue(vo.getCO_ID());		}		DB.me().update(conn, sql);	}	public int updateConsumerOrdersByCondition(ConsumerOrdersVo vo)			throws Exception {		StringBuilder condition = new StringBuilder();		try {			if(vo.getCO_ID()>0){				condition.append(" CO_ID = " + vo.getCO_ID());				vo.setCO_ID(null);				int r = DB.me().update(						MyDatabaseEnum.YiHuNet2008,						DB.me().createUpdateSql(vo, MyTableNameEnum.ZiXun_ConsumerOrders,condition.toString()								));				return r;			}else{				return -1;			}					} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	public int updateCOrdersByCondition(ConsumerOrdersVo vo,	JdbcConnection conn)			throws Exception {		try {			Sql sql = DB.me().createSql(					ConsumerOrdersSqlNameEnum.updateConsumerOrdersByCondition);			if (vo == null || StringUtil.isEmpty(vo.getCO_ID())) {				return -1;				//throw new Exception(" 不能为空或者 主键id 不能为空");			}			StringBuilder condition = new StringBuilder();			if(vo.getCO_Status() != null){				condition.append(" CO_Status = " + vo.getCO_Status() );			}			if (condition.length() == 0) {				return -1;			} else {				sql.addVar("@condition", condition.toString());				sql.addParamValue(vo.getCO_ID());			}			DB.me().update(conn, sql);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}		return 0;	}		public int updateCOrdersByCondition(ConsumerOrdersVo vo)			throws Exception {		try {			Sql sql = DB.me().createSql(					ConsumerOrdersSqlNameEnum.updateConsumerOrdersByCondition);			if (vo == null || StringUtil.isEmpty(vo.getCO_ID())) {				return -1;				//throw new Exception(" 不能为空或者 主键id 不能为空");			}			StringBuilder condition = new StringBuilder();			if(vo.getCO_Status() != null){				condition.append(" CO_Status = " + vo.getCO_Status() );			}			if (condition.length() == 0) {				return -1;			} else {				sql.addVar("@condition", condition.toString());				sql.addParamValue(vo.getCO_ID());			}			DB.me().update(MyDatabaseEnum.YiHuNet2008, sql);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}		return 0;	}	}