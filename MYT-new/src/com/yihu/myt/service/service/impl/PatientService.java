package com.yihu.myt.service.service.impl;import java.sql.SQLException;import java.util.List;import com.coreframework.db.DB;import com.coreframework.db.JdbcConnection;import com.coreframework.db.Sql;import com.yihu.myt.enums.MyDatabaseEnum;import com.yihu.myt.enums.MyTableNameEnum;import com.yihu.myt.enums.PatientSqlNameEnum;import com.yihu.myt.util.StringUtil;import com.yihu.myt.vo.PatientVo;import com.yihu.myt.service.service.IPatientService;public class PatientService implements IPatientService {	/**	 * 获取列表记录数	 */	public Integer queryPatientCountByCondition(PatientVo vo) throws Exception {		Sql sql = DB.me().createSql(				PatientSqlNameEnum.queryPatientCountByCondition);		StringBuilder condition = new StringBuilder();		sql.addVar("@condition", condition.toString());		Integer count = DB.me()				.queryForInteger(MyDatabaseEnum.YiHuNet2008, sql);		return count;	}	/**	 * 获取列表	 */	public List<PatientVo> queryPatientListByCondition(PatientVo vo)			throws Exception {		Sql sql = DB.me().createSql(				PatientSqlNameEnum.queryPatientListByCondition);		StringBuilder condition = new StringBuilder();		if(vo.getPATIENT_ID()!=null){			condition.append(" and PATIENT_ID =" + vo.getPATIENT_ID());		}		if(StringUtil.isNotEmpty(vo.getPatIDs())){			condition.append(" and PATIENT_ID  in ("  );			String[] ids = vo.getPatIDs().split(",");			for(int i = 0 ; i <ids.length ;i++){				condition.append(" ? ,");				sql.addParamValue(ids[i]);			}			condition.deleteCharAt(condition.length()-1);			condition.append("   )");		}		sql.addVar("@condition", condition.toString());		sql.addVar("@page", "");		List<PatientVo> list = DB.me().queryForBeanList(				MyDatabaseEnum.YiHuNet2008, sql, PatientVo.class);		return list;	}	public PatientVo queryPatient(PatientVo vo) throws Exception{		 List<PatientVo>list = this.queryPatientListByCondition(vo);		if (list == null || list.size() == 0) {			return null;		} else {			return list.get(0);		}	}	/**	 * 添加	 */	/*public int insertPatient(PatientVo vo) throws Exception {		JdbcConnection conn = DB.me().getConnection(MyDatabaseEnum.YiHuNet2008);		Sql sql = DB.me().createSql(PatientSqlNameEnum.insertThePatient);		sql.addParamValue(vo.getPATIENT_Name());		sql.addParamValue(vo.getPATIENT_Birth());		sql.addParamValue(vo.getPATIENT_Sex());		sql.addParamValue(vo.getASK_CityID());		sql.addParamValue(vo.getASK_CityName());		sql.addParamValue(vo.getASK_ProvinceID());		sql.addParamValue(vo.getASK_ProvinceName());		int rt = DB.me().insert(conn, sql);		return rt;	}*/	public int insertPatient(PatientVo vo) throws Exception {		try {			int r = DB.me().insert(					MyDatabaseEnum.YiHuNet2008,					DB.me().createInsertSql(vo,							MyTableNameEnum.ZiXun_Patient, "dbo"));			return r;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return -1;		}	}	/**	 * 修改	 */	public void updatePatientByCondition(PatientVo vo, JdbcConnection conn)			throws Exception {		Sql sql = DB.me()				.createSql(PatientSqlNameEnum.updatePatientByCondition);		if (vo == null || StringUtil.isEmpty(vo.getPATIENT_ID())) {			throw new Exception(" 不能为空或者 主键id 不能为空");		}		StringBuilder condition = new StringBuilder();		if (condition.length() == 0) {			throw new Exception("未有更新SQL被执行！");		} else {			condition.deleteCharAt(condition.length() - 1);			sql.addVar("@condition", condition.toString());			sql.addParamValue(vo.getPATIENT_ID());		}		DB.me().update(conn, sql);	}}